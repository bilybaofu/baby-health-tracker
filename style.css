// 婴幼儿体检报告智能识别系统 - 百度OCR增强版
class BabyHealthTracker {
    constructor() {
        // 百度OCR配置
        this.baiduOCR = {
            apiKey: localStorage.getItem('baidu_ocr_api_key') || '',
            secretKey: localStorage.getItem('baidu_ocr_secret_key') || '',
            accessToken: localStorage.getItem('baidu_ocr_access_token') || '',
            tokenExpiry: localStorage.getItem('baidu_ocr_token_expiry') || 0
        };
        
        // Deepseek配置
        this.deepseekApiKey = localStorage.getItem('deepseek_api_key') || '';
        
        this.checkRecords = JSON.parse(localStorage.getItem('baby_check_records')) || [];
        this.babyInfo = JSON.parse(localStorage.getItem('baby_info') || '{}');
        this.isUploading = false;
        this.lastOCRResult = null;
        this.whoData = this.initCompleteWHOData();
        this.growthChart = null;
        this.tempExtractedData = null;
        this.init();
    }

    // 初始化完整WHO 2006标准数据
    initCompleteWHOData() {
        return {
            // 男童身高数据 [月龄: [-3SD, -2SD, -1SD, 中位数, +1SD, +2SD, +3SD]]
            maleHeight: {
                0: [44.2, 46.1, 48.0, 49.9, 51.8, 53.7, 55.6],
                1: [48.9, 50.8, 52.8, 54.7, 56.7, 58.6, 60.6],
                2: [52.4, 54.4, 56.4, 58.4, 60.4, 62.4, 64.4],
                3: [55.3, 57.3, 59.4, 61.4, 63.5, 65.5, 67.6],
                4: [57.6, 59.7, 61.8, 63.9, 66.0, 68.0, 70.1],
                5: [59.6, 61.7, 63.8, 65.9, 68.0, 70.1, 72.2],
                6: [61.2, 63.3, 65.5, 67.6, 69.8, 71.9, 74.0],
                7: [62.7, 64.8, 67.0, 69.2, 71.3, 73.5, 75.7],
                8: [64.0, 66.2, 68.4, 70.6, 72.8, 75.0, 77.2],
                9: [65.2, 67.5, 69.7, 72.0, 74.2, 76.5, 78.7],
                10: [66.4, 68.7, 71.0, 73.3, 75.6, 77.9, 80.1],
                11: [67.6, 69.9, 72.2, 74.5, 76.9, 79.2, 81.5],
                12: [68.6, 71.0, 73.4, 75.7, 78.1, 80.5, 82.9],
                13: [69.6, 72.1, 74.5, 76.9, 79.3, 81.8, 84.2],
                14: [70.6, 73.1, 75.6, 78.0, 80.5, 83.0, 85.5],
                15: [71.6, 74.1, 76.6, 79.1, 81.7, 84.2, 86.7],
                16: [72.5, 75.0, 77.6, 80.2, 82.8, 85.4, 88.0],
                17: [73.3, 76.0, 78.6, 81.2, 83.9, 86.5, 89.2],
                18: [74.2, 76.9, 79.6, 82.3, 85.0, 87.7, 90.4],
                19: [75.0, 77.7, 80.5, 83.2, 86.0, 88.8, 91.5],
                20: [75.8, 78.6, 81.4, 84.2, 87.0, 89.8, 92.6],
                21: [76.5, 79.4, 82.3, 85.1, 88.0, 90.9, 93.8],
                22: [77.2, 80.2, 83.1, 86.0, 89.0, 91.9, 94.9],
                23: [78.0, 81.0, 83.9, 86.9, 89.9, 92.9, 95.9],
                24: [78.7, 81.7, 84.8, 87.8, 90.9, 93.9, 97.0],
                25: [78.6, 81.7, 84.9, 88.0, 91.1, 94.2, 97.3],
                26: [79.3, 82.5, 85.6, 88.8, 92.0, 95.2, 98.3],
                27: [79.9, 83.1, 86.4, 89.6, 92.9, 96.1, 99.3],
                28: [80.5, 83.8, 87.1, 90.4, 93.7, 97.0, 100.3],
                29: [81.1, 84.5, 87.8, 91.2, 94.5, 97.9, 101.2],
                30: [81.7, 85.1, 88.5, 91.9, 95.3, 98.7, 102.1],
                31: [82.3, 85.7, 89.2, 92.7, 96.1, 99.6, 103.0],
                32: [82.8, 86.4, 89.9, 93.4, 96.9, 100.4, 103.9],
                33: [83.4, 86.9, 90.5, 94.1, 97.6, 101.2, 104.8],
                34: [83.9, 87.5, 91.1, 94.8, 98.4, 102.0, 105.6],
                35: [84.4, 88.1, 91.8, 95.4, 99.1, 102.7, 106.4],
                36: [85.0, 88.7, 92.4, 96.1, 99.8, 103.5, 107.2]
            },
            // 女童身高数据
            femaleHeight: {
                0: [43.6, 45.4, 47.3, 49.1, 51.0, 52.9, 54.7],
                1: [47.8, 49.8, 51.7, 53.7, 55.6, 57.6, 59.5],
                2: [51.0, 53.0, 55.0, 57.1, 59.1, 61.1, 63.2],
                3: [53.5, 55.6, 57.7, 59.8, 61.9, 64.0, 66.1],
                4: [55.6, 57.8, 59.9, 62.1, 64.3, 66.4, 68.6],
                5: [57.4, 59.6, 61.8, 64.0, 66.2, 68.5, 70.7],
                6: [58.9, 61.2, 63.5, 65.7, 68.0, 70.3, 72.5],
                7: [60.3, 62.7, 65.0, 67.3, 69.6, 71.9, 74.2],
                8: [61.7, 64.0, 66.4, 68.7, 71.1, 73.5, 75.8],
                9: [62.9, 65.3, 67.7, 70.1, 72.6, 75.0, 77.4],
                10: [64.1, 66.5, 69.0, 71.5, 73.9, 76.4, 78.9],
                11: [65.2, 67.7, 70.3, 72.8, 75.3, 77.8, 80.3],
                12: [66.3, 68.9, 71.4, 74.0, 76.6, 79.2, 81.7],
                13: [67.3, 70.0, 72.6, 75.2, 77.8, 80.5, 83.1],
                14: [68.3, 71.0, 73.7, 76.4, 79.1, 81.7, 84.4],
                15: [69.3, 72.0, 74.8, 77.5, 80.2, 83.0, 85.7],
                16: [70.2, 73.0, 75.8, 78.6, 81.4, 84.2, 87.0],
                17: [71.1, 74.0, 76.8, 79.7, 82.5, 85.4, 88.2],
                18: [72.0, 74.9, 77.8, 80.7, 83.6, 86.5, 89.4],
                19: [72.8, 75.8, 78.8, 81.7, 84.7, 87.6, 90.6],
                20: [73.7, 76.7, 79.7, 82.7, 85.7, 88.7, 91.7],
                21: [74.5, 77.5, 80.6, 83.7, 86.7, 89.8, 92.9],
                22: [75.2, 78.4, 81.5, 84.6, 87.7, 90.8, 94.0],
                23: [76.0, 79.2, 82.3, 85.5, 88.7, 91.9, 95.0],
                24: [76.7, 80.0, 83.2, 86.4, 89.6, 92.9, 96.1],
                25: [76.8, 80.0, 83.3, 86.6, 89.9, 93.1, 96.4],
                26: [77.5, 80.8, 84.1, 87.4, 90.8, 94.1, 97.4],
                27: [78.1, 81.5, 84.9, 88.3, 91.7, 95.0, 98.4],
                28: [78.8, 82.2, 85.7, 89.1, 92.5, 96.0, 99.4],
                29: [79.5, 82.9, 86.4, 89.9, 93.4, 96.9, 100.3],
                30: [80.1, 83.6, 87.1, 90.7, 94.2, 97.7, 101.3],
                31: [80.7, 84.3, 87.9, 91.4, 95.0, 98.6, 102.2],
                32: [81.3, 84.9, 88.6, 92.2, 95.8, 99.4, 103.1],
                33: [81.9, 85.6, 89.3, 92.9, 96.6, 100.3, 103.9],
                34: [82.5, 86.2, 89.9, 93.6, 97.4, 101.1, 104.8],
                35: [83.1, 86.8, 90.6, 94.4, 98.1, 101.9, 105.6],
                36: [83.6, 87.4, 91.2, 95.1, 98.9, 102.7, 106.5]
            },
            // 男童体重数据
            maleWeight: {
                0: [2.1, 2.5, 2.9, 3.3, 3.9, 4.4, 5.0],
                1: [2.9, 3.4, 3.9, 4.5, 5.1, 5.8, 6.6],
                2: [3.8, 4.3, 4.9, 5.6, 6.3, 7.1, 8.0],
                3: [4.4, 5.0, 5.7, 6.4, 7.2, 8.0, 9.0],
                4: [4.9, 5.6, 6.2, 7.0, 7.8, 8.7, 9.7],
                5: [5.3, 6.0, 6.7, 7.5, 8.4, 9.3, 10.4],
                6: [5.7, 6.4, 7.1, 7.9, 8.8, 9.8, 10.9],
                7: [5.9, 6.7, 7.4, 8.3, 9.2, 10.3, 11.4],
                8: [6.2, 6.9, 7.7, 8.6, 9.6, 10.7, 11.9],
                9: [6.4, 7.1, 8.0, 8.9, 9.9, 11.0, 12.3],
                10: [6.6, 7.4, 8.2, 9.2, 10.2, 11.4, 12.7],
                11: [6.8, 7.6, 8.4, 9.4, 10.5, 11.7, 13.0],
                12: [6.9, 7.7, 8.6, 9.6, 10.8, 12.0, 13.3],
                13: [7.1, 7.9, 8.8, 9.9, 11.0, 12.3, 13.7],
                14: [7.2, 8.1, 9.0, 10.1, 11.3, 12.6, 14.0],
                15: [7.4, 8.3, 9.2, 10.3, 11.5, 12.8, 14.3],
                16: [7.5, 8.4, 9.4, 10.5, 11.7, 13.1, 14.6],
                17: [7.7, 8.6, 9.6, 10.7, 12.0, 13.4, 14.9],
                18: [7.8, 8.8, 9.8, 10.9, 12.2, 13.7, 15.3],
                19: [8.0, 8.9, 10.0, 11.1, 12.5, 13.9, 15.6],
                20: [8.1, 9.1, 10.1, 11.3, 12.7, 14.2, 15.9],
                21: [8.2, 9.2, 10.3, 11.5, 12.9, 14.5, 16.2],
                22: [8.4, 9.4, 10.5, 11.8, 13.2, 14.7, 16.5],
                23: [8.5, 9.5, 10.7, 12.0, 13.4, 15.0, 16.8],
                24: [8.6, 9.7, 10.8, 12.2, 13.6, 15.3, 17.1],
                25: [8.8, 9.8, 11.0, 12.4, 13.9, 15.5, 17.5],
                26: [8.9, 10.0, 11.2, 12.5, 14.1, 15.8, 17.8],
                27: [9.0, 10.1, 11.3, 12.7, 14.3, 16.1, 18.1],
                28: [9.1, 10.2, 11.5, 12.9, 14.5, 16.3, 18.4],
                29: [9.2, 10.4, 11.7, 13.1, 14.8, 16.6, 18.7],
                30: [9.4, 10.5, 11.8, 13.3, 15.0, 16.9, 19.0],
                31: [9.5, 10.7, 12.0, 13.5, 15.2, 17.1, 19.3],
                32: [9.6, 10.8, 12.1, 13.7, 15.4, 17.4, 19.6],
                33: [9.7, 10.9, 12.3, 13.8, 15.6, 17.6, 19.9],
                34: [9.8, 11.0, 12.4, 14.0, 15.8, 17.8, 20.2],
                35: [9.9, 11.2, 12.6, 14.2, 16.0, 18.1, 20.4],
                36: [10.0, 11.3, 12.7, 14.3, 16.2, 18.3, 20.7]
            },
            // 女童体重数据
            femaleWeight: {
                0: [2.0, 2.4, 2.8, 3.2, 3.7, 4.2, 4.8],
                1: [2.7, 3.2, 3.6, 4.2, 4.8, 5.5, 6.2],
                2: [3.4, 3.9, 4.5, 5.1, 5.8, 6.6, 7.5],
                3: [4.0, 4.5, 5.2, 5.8, 6.6, 7.5, 8.5],
                4: [4.4, 5.0, 5.7, 6.4, 7.3, 8.2, 9.3],
                5: [4.8, 5.4, 6.1, 6.9, 7.8, 8.8, 10.0],
                6: [5.1, 5.7, 6.5, 7.3, 8.2, 9.3, 10.6],
                7: [5.3, 6.0, 6.8, 7.6, 8.6, 9.8, 11.1],
                8: [5.6, 6.3, 7.0, 7.9, 9.0, 10.2, 11.6],
                9: [5.8, 6.5, 7.3, 8.2, 9.3, 10.5, 12.0],
                10: [5.9, 6.7, 7.5, 8.5, 9.6, 10.9, 12.4],
                11: [6.1, 6.9, 7.7, 8.7, 9.9, 11.2, 12.8],
                12: [6.3, 7.0, 7.9, 8.9, 10.1, 11.5, 13.1],
                13: [6.4, 7.2, 8.1, 9.2, 10.4, 11.8, 13.5],
                14: [6.6, 7.4, 8.3, 9.4, 10.6, 12.1, 13.8],
                15: [6.7, 7.6, 8.5, 9.6, 10.9, 12.4, 14.1],
                16: [6.9, 7.7, 8.7, 9.8, 11.1, 12.6, 14.5],
                17: [7.0, 7.9, 8.9, 10.0, 11.4, 12.9, 14.8],
                18: [7.2, 8.1, 9.1, 10.2, 11.6, 13.2, 15.1],
                19: [7.3, 8.2, 9.2, 10.4, 11.8, 13.5, 15.4],
                20: [7.5, 8.4, 9.4, 10.6, 12.1, 13.7, 15.7],
                21: [7.6, 8.6, 9.6, 10.9, 12.3, 14.0, 16.0],
                22: [7.8, 8.7, 9.8, 11.1, 12.5, 14.3, 16.4],
                23: [7.9, 8.9, 10.0, 11.3, 12.8, 14.6, 16.7],
                24: [8.1, 9.0, 10.2, 11.5, 13.0, 14.8, 17.0],
                25: [8.2, 9.2, 10.3, 11.7, 13.3, 15.1, 17.3],
                26: [8.4, 9.4, 10.5, 11.9, 13.5, 15.4, 17.7],
                27: [8.5, 9.5, 10.7, 12.1, 13.7, 15.7, 18.0],
                28: [8.6, 9.7, 10.9, 12.3, 14.0, 16.0, 18.3],
                29: [8.8, 9.8, 11.1, 12.5, 14.2, 16.2, 18.7],
                30: [8.9, 10.0, 11.2, 12.7, 14.4, 16.5, 19.0],
                31: [9.0, 10.1, 11.4, 12.9, 14.7, 16.8, 19.3],
                32: [9.1, 10.3, 11.6, 13.1, 14.9, 17.1, 19.6],
                33: [9.3, 10.4, 11.7, 13.3, 15.1, 17.3, 20.0],
                34: [9.4, 10.5, 11.9, 13.5, 15.4, 17.6, 20.3],
                35: [9.5, 10.7, 12.0, 13.7, 15.6, 17.9, 20.6],
                36: [9.6, 10.8, 12.2, 13.9, 15.8, 18.1, 20.9]
            },
            // 男童头围数据 (WHO 2006标准)
            maleHeadCircumference: {
                0: [30.4, 31.7, 33.0, 34.3, 35.6, 36.9, 38.3],
                1: [33.4, 34.6, 35.8, 37.0, 38.2, 39.4, 40.6],
                2: [35.7, 36.8, 37.9, 39.1, 40.2, 41.4, 42.6],
                3: [37.1, 38.2, 39.3, 40.5, 41.6, 42.8, 44.1],
                4: [38.1, 39.3, 40.4, 41.6, 42.8, 44.0, 45.3],
                5: [39.0, 40.2, 41.3, 42.5, 43.8, 45.0, 46.3],
                6: [39.8, 41.0, 42.1, 43.4, 44.6, 45.9, 47.2],
                7: [40.5, 41.7, 42.8, 44.0, 45.3, 46.6, 47.9],
                8: [41.1, 42.2, 43.4, 44.6, 45.9, 47.2, 48.5],
                9: [41.5, 42.7, 43.9, 45.1, 46.4, 47.7, 49.0],
                10: [41.9, 43.1, 44.3, 45.5, 46.8, 48.1, 49.4],
                11: [42.3, 43.4, 44.6, 45.8, 47.1, 48.4, 49.8],
                12: [42.5, 43.7, 44.9, 46.1, 47.4, 48.7, 50.1],
                13: [42.8, 44.0, 45.1, 46.4, 47.7, 49.0, 50.3],
                14: [43.0, 44.2, 45.4, 46.6, 47.9, 49.2, 50.6],
                15: [43.2, 44.4, 45.6, 46.8, 48.1, 49.4, 50.8],
                16: [43.4, 44.6, 45.8, 47.0, 48.3, 49.6, 51.0],
                17: [43.6, 44.7, 45.9, 47.2, 48.5, 49.8, 51.2],
                18: [43.8, 44.9, 46.1, 47.4, 48.7, 50.0, 51.4],
                19: [43.9, 45.1, 46.3, 47.5, 48.8, 50.2, 51.6],
                20: [44.1, 45.3, 46.5, 47.7, 49.0, 50.4, 51.7],
                21: [44.3, 45.4, 46.6, 47.9, 49.2, 50.5, 51.9],
                22: [44.4, 45.6, 46.8, 48.1, 49.4, 50.7, 52.1],
                23: [44.6, 45.7, 47.0, 48.2, 49.5, 50.9, 52.3],
                24: [44.7, 45.9, 47.1, 48.3, 49.6, 51.0, 52.4],
                25: [44.8, 46.0, 47.2, 48.4, 49.7, 51.1, 52.5],
                26: [44.9, 46.1, 47.3, 48.5, 49.8, 51.2, 52.6],
                27: [45.0, 46.2, 47.4, 48.7, 50.0, 51.3, 52.7],
                28: [45.1, 46.3, 47.5, 48.8, 50.1, 51.4, 52.8],
                29: [45.2, 46.3, 47.6, 48.8, 50.2, 51.5, 52.9],
                30: [45.3, 46.4, 47.7, 48.9, 50.3, 51.6, 53.0],
                31: [45.4, 46.5, 47.8, 49.0, 50.4, 51.7, 53.1],
                32: [45.4, 46.6, 47.8, 49.1, 50.4, 51.8, 53.2],
                33: [45.5, 46.7, 47.9, 49.2, 50.5, 51.9, 53.3],
                34: [45.6, 46.7, 48.0, 49.2, 50.6, 52.0, 53.4],
                35: [45.6, 46.8, 48.0, 49.3, 50.6, 52.0, 53.4],
                36: [45.7, 46.8, 48.1, 49.3, 50.7, 52.1, 53.5]
            },
            // 女童头围数据 (WHO 2006标准)
            femaleHeadCircumference: {
                0: [30.1, 31.4, 32.7, 33.9, 35.2, 36.5, 37.7],
                1: [32.9, 34.0, 35.2, 36.3, 37.5, 38.6, 39.8],
                2: [34.9, 36.0, 37.1, 38.2, 39.3, 40.4, 41.6],
                3: [36.2, 37.3, 38.4, 39.5, 40.7, 41.8, 42.9],
                4: [37.2, 38.3, 39.4, 40.6, 41.7, 42.9, 44.1],
                5: [38.0, 39.2, 40.3, 41.5, 42.6, 43.8, 45.0],
                6: [38.8, 39.9, 41.1, 42.2, 43.4, 44.6, 45.9],
                7: [39.4, 40.6, 41.7, 42.9, 44.1, 45.3, 46.6],
                8: [40.0, 41.1, 42.3, 43.5, 44.7, 45.9, 47.2],
                9: [40.4, 41.6, 42.8, 44.0, 45.2, 46.5, 47.7],
                10: [40.8, 42.0, 43.2, 44.4, 45.6, 46.9, 48.2],
                11: [41.2, 42.4, 43.6, 44.8, 46.0, 47.3, 48.6],
                12: [41.5, 42.7, 43.9, 45.1, 46.4, 47.6, 48.9],
                13: [41.8, 42.9, 44.2, 45.4, 46.6, 47.9, 49.2],
                14: [42.0, 43.2, 44.4, 45.6, 46.9, 48.2, 49.5],
                15: [42.2, 43.4, 44.6, 45.9, 47.1, 48.4, 49.7],
                16: [42.4, 43.6, 44.8, 46.1, 47.3, 48.6, 50.0],
                17: [42.6, 43.8, 45.0, 46.2, 47.5, 48.8, 50.1],
                18: [42.7, 43.9, 45.2, 46.4, 47.7, 49.0, 50.3],
                19: [42.9, 44.1, 45.3, 46.6, 47.9, 49.2, 50.5],
                20: [43.1, 44.3, 45.5, 46.7, 48.0, 49.3, 50.7],
                21: [43.2, 44.4, 45.6, 46.9, 48.2, 49.5, 50.9],
                22: [43.4, 44.6, 45.8, 47.1, 48.4, 49.7, 51.0],
                23: [43.5, 44.7, 45.9, 47.2, 48.5, 49.8, 51.2],
                24: [43.6, 44.8, 46.1, 47.3, 48.6, 50.0, 51.3],
                25: [43.7, 44.9, 46.2, 47.4, 48.8, 50.1, 51.5],
                26: [43.8, 45.0, 46.3, 47.5, 48.9, 50.2, 51.6],
                27: [43.9, 45.1, 46.4, 47.6, 49.0, 50.3, 51.7],
                28: [44.0, 45.2, 46.5, 47.7, 49.1, 50.4, 51.8],
                29: [44.1, 45.3, 46.6, 47.8, 49.2, 50.5, 51.9],
                30: [44.2, 45.4, 46.7, 47.9, 49.3, 50.6, 52.0],
                31: [44.3, 45.5, 46.8, 48.0, 49.4, 50.7, 52.1],
                32: [44.3, 45.6, 46.8, 48.1, 49.5, 50.8, 52.2],
                33: [44.4, 45.7, 46.9, 48.2, 49.6, 50.9, 52.3],
                34: [44.5, 45.8, 47.0, 48.3, 49.7, 51.0, 52.4],
                35: [44.6, 45.8, 47.1, 48.4, 49.8, 51.1, 52.5],
                36: [44.7, 45.9, 47.2, 48.5, 49.9, 51.2, 52.7]
            }
        };
    }

    // 初始化
    init() {
        this.bindEvents();
        this.loadSavedData();
        this.updateUI();
        this.initializeChart();
    }

    // 验证基本信息是否完整
    validateBasicInfo() {
        const name = this.babyInfo.name?.trim();
        const gender = this.babyInfo.gender;
        const birthDate = this.babyInfo.birthDate;

        console.log('验证基本信息:', { name, gender, birthDate });

        if (!name || !gender || !birthDate) {
            this.showMessage('🍼 请先完整填写宝宝的基本信息（姓名、性别、出生日期）', 'error');
            this.switchToBasicInfoTab();
            return false;
        }
        return true;
    }

    // 切换到基本信息标签页
    switchToBasicInfoTab() {
        const basicInfoTab = document.querySelector('[data-tab="basic-info"]');
        const basicInfoContent = document.getElementById('basic-info');

        if (basicInfoTab && basicInfoContent) {
            document.querySelectorAll('.tab-button').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            basicInfoTab.classList.add('active');
            basicInfoContent.classList.add('active');
        }
    }

    // 绑定事件监听器
    bindEvents() {
        // 百度OCR API密钥设置
        const baiduApiKeyInput = document.getElementById('baiduApiKey');
        const baiduSecretKeyInput = document.getElementById('baiduSecretKey');
        const saveBaiduKeysBtn = document.getElementById('saveBaiduKeysBtn');

        if (baiduApiKeyInput) {
            baiduApiKeyInput.addEventListener('change', (e) => {
                this.baiduOCR.apiKey = e.target.value.trim();
                this.updateOCRStatus();
            });
        }

        if (baiduSecretKeyInput) {
            baiduSecretKeyInput.addEventListener('change', (e) => {
                this.baiduOCR.secretKey = e.target.value.trim();
                this.updateOCRStatus();
            });
        }

        if (saveBaiduKeysBtn) {
            saveBaiduKeysBtn.addEventListener('click', () => {
                this.saveBaiduOCRKeys();
            });
        }

        // Deepseek API密钥设置
        const deepseekApiKeyInput = document.getElementById('deepseekApiKey');
        const saveDeepseekKeyBtn = document.getElementById('saveDeepseekKeyBtn');

        if (deepseekApiKeyInput) {
            deepseekApiKeyInput.addEventListener('change', (e) => {
                this.deepseekApiKey = e.target.value.trim();
                this.updateDeepseekStatus();
            });
        }

        if (saveDeepseekKeyBtn) {
            saveDeepseekKeyBtn.addEventListener('click', () => {
                this.saveDeepseekKey();
            });
        }

        // 图片上传
        const reportUpload = document.getElementById('reportUpload');
        if (reportUpload) {
            reportUpload.addEventListener('change', (e) => {
                this.handleImageUpload(e.target.files[0]);
            });
        }

        // 手动添加记录
        const addRecordBtn = document.getElementById('addRecordBtn');
        if (addRecordBtn) {
            addRecordBtn.addEventListener('click', () => {
                this.addManualRecord();
            });
        }

        // 一键清除记录
        const clearAllRecordsBtn = document.getElementById('clearAllRecordsBtn');
        if (clearAllRecordsBtn) {
            clearAllRecordsBtn.addEventListener('click', () => {
                this.clearAllRecords();
            });
        }

        // 导出数据
        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                this.exportData();
            });
        }

        // 导入数据
        const importBtn = document.getElementById('importBtn');
        if (importBtn) {
            importBtn.addEventListener('click', () => {
                this.importData();
            });
        }

        // 清空表单
        const clearFormBtn = document.getElementById('clearFormBtn');
        if (clearFormBtn) {
            clearFormBtn.addEventListener('click', () => {
                this.clearForm();
            });
        }

        // 拖拽上传
        const uploadArea = document.querySelector('.upload-area');
        if (uploadArea) {
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    this.handleImageUpload(files[0]);
                }
            });
        }

        // 实时计算百分位
        const inputs = ['ageMonths', 'height', 'weight', 'headCircumference'];
        inputs.forEach(id => {
            const input = document.getElementById(id);
            if (input) {
                input.addEventListener('input', () => {
                    this.updatePercentiles();
                });
            }
        });

        // 保存宝宝基本信息
        const babyInfoInputs = ['babyName', 'babyGender', 'babyBirthDate'];
        babyInfoInputs.forEach(id => {
            const input = document.getElementById(id);
            if (input) {
                input.addEventListener('change', () => {
                    this.saveBabyInfo();
                    this.updateCurrentStatus();
                });
            }
        });

        // 体检日期变化时自动计算月龄
        const checkDateInput = document.getElementById('checkDate');
        if (checkDateInput) {
            checkDateInput.addEventListener('change', () => {
                this.autoCalculateAge();
            });
        }
    }

    // 保存百度OCR密钥
    saveBaiduOCRKeys() {
        const apiKeyInput = document.getElementById('baiduApiKey');
        const secretKeyInput = document.getElementById('baiduSecretKey');
        
        if (apiKeyInput && secretKeyInput) {
            this.baiduOCR.apiKey = apiKeyInput.value.trim();
            this.baiduOCR.secretKey = secretKeyInput.value.trim();
            
            if (this.baiduOCR.apiKey && this.baiduOCR.secretKey) {
                localStorage.setItem('baidu_ocr_api_key', this.baiduOCR.apiKey);
                localStorage.setItem('baidu_ocr_secret_key', this.baiduOCR.secretKey);
                // 清除旧的access token，下次使用时重新获取
                this.baiduOCR.accessToken = '';
                this.baiduOCR.tokenExpiry = 0;
                localStorage.removeItem('baidu_ocr_access_token');
                localStorage.removeItem('baidu_ocr_token_expiry');
                
                this.updateOCRStatus();
                this.showMessage('🔑 百度OCR密钥保存成功', 'success');
            } else {
                this.showMessage('❌ 请输入完整的API Key和Secret Key', 'error');
            }
        }
    }

    // 保存Deepseek密钥
    saveDeepseekKey() {
        const apiKeyInput = document.getElementById('deepseekApiKey');
        if (apiKeyInput) {
            this.deepseekApiKey = apiKeyInput.value.trim();
            if (this.deepseekApiKey) {
                localStorage.setItem('deepseek_api_key', this.deepseekApiKey);
                this.updateDeepseekStatus();
                this.showMessage('🔑 Deepseek API密钥保存成功', 'success');
            } else {
                this.showMessage('❌ 请输入有效的API密钥', 'error');
            }
        }
    }

    // 更新OCR状态显示
    updateOCRStatus() {
        const statusIndicator = document.getElementById('ocrStatus');
        const statusText = document.getElementById('ocrStatusText');

        if (this.baiduOCR.apiKey && this.baiduOCR.secretKey) {
            if (statusIndicator) statusIndicator.classList.add('connected');
            if (statusText) statusText.textContent = '🤖 百度OCR已连接';
        } else {
            if (statusIndicator) statusIndicator.classList.remove('connected');
            if (statusText) statusText.textContent = '😴 未连接';
        }
    }

    // 更新Deepseek状态显示
    updateDeepseekStatus() {
        const statusIndicator = document.getElementById('deepseekStatus');
        const statusText = document.getElementById('deepseekStatusText');

        if (this.deepseekApiKey && this.deepseekApiKey.trim() !== '') {
            if (statusIndicator) statusIndicator.classList.add('connected');
            if (statusText) statusText.textContent = '🤖 Deepseek AI已连接';
        } else {
            if (statusIndicator) statusIndicator.classList.remove('connected');
            if (statusText) statusText.textContent = '😴 未连接';
        }
    }

    // 自动计算月龄
    autoCalculateAge() {
        const birthDate = this.babyInfo.birthDate;
        const checkDate = document.getElementById('checkDate')?.value;

        console.log('计算月龄 - 出生日期:', birthDate, '体检日期:', checkDate);

        if (birthDate && checkDate) {
            const birth = new Date(birthDate);
            const check = new Date(checkDate);

            if (check >= birth) {
                const years = check.getFullYear() - birth.getFullYear();
                const months = check.getMonth() - birth.getMonth();
                const days = check.getDate() - birth.getDate();

                let totalMonths = years * 12 + months;
                if (days < 0) {
                    totalMonths -= 1;
                }

                const exactMonths = totalMonths + (days >= 0 ? days / 30 : (30 + days) / 30);
                const roundedMonths = Math.round(exactMonths * 10) / 10;

                const ageInput = document.getElementById('ageMonths');
                if (ageInput) {
                    ageInput.value = roundedMonths;
                    this.updatePercentiles();
                    console.log('自动计算月龄:', roundedMonths);
                }
            }
        } else if (!birthDate) {
            this.showMessage('🍼 请先在基本信息中填写出生日期', 'warning');
        }
    }

    // 保存宝宝基本信息
    saveBabyInfo() {
        this.babyInfo = {
            name: document.getElementById('babyName')?.value || '',
            gender: document.getElementById('babyGender')?.value || '',
            birthDate: document.getElementById('babyBirthDate')?.value || ''
        };
        this.saveData();
        console.log('宝宝信息已保存:', this.babyInfo);
    }

    // 一键清除所有记录
    clearAllRecords() {
        if (this.checkRecords.length === 0) {
            this.showMessage('🤔 没有记录需要清除', 'info');
            return;
        }

        if (confirm(`🗑️ 确定要清除所有 ${this.checkRecords.length} 条体检记录吗？此操作不可恢复！`)) {
            this.checkRecords = [];
            this.saveData();
            this.updateRecordsTable();
            this.updateStatistics();
            this.updateCurrentStatus();
            this.updateChart();
            this.showMessage('✨ 所有记录已清除', 'success');
        }
    }

    // 获取百度OCR Access Token
    async getBaiduAccessToken() {
        console.log('=== 开始获取百度OCR Access Token ===');
        
        // 检查当前token是否有效
        const currentTime = Date.now();
        if (this.baiduOCR.accessToken && currentTime < this.baiduOCR.tokenExpiry) {
            console.log('使用缓存的access token');
            return this.baiduOCR.accessToken;
        }

        console.log('获取新的access token...');
        
        try {
            const response = await fetch('https://aip.baidubce.com/oauth/2.0/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `grant_type=client_credentials&client_id=${this.baiduOCR.apiKey}&client_secret=${this.baiduOCR.secretKey}`
            });

            if (!response.ok) {
                throw new Error(`获取Access Token失败: ${response.status}`);
            }

            const data = await response.json();
            console.log('百度OCR Token响应:', data);

            if (data.error) {
                throw new Error(`百度API错误: ${data.error_description || data.error}`);
            }

            if (!data.access_token) {
                throw new Error('未收到有效的Access Token');
            }

            // 保存token和过期时间
            this.baiduOCR.accessToken = data.access_token;
            this.baiduOCR.tokenExpiry = currentTime + (data.expires_in * 1000) - 300000; // 提前5分钟过期

            localStorage.setItem('baidu_ocr_access_token', this.baiduOCR.accessToken);
            localStorage.setItem('baidu_ocr_token_expiry', this.baiduOCR.tokenExpiry.toString());

            console.log('Access Token获取成功');
            return this.baiduOCR.accessToken;

        } catch (error) {
            console.error('获取百度OCR Access Token失败:', error);
            throw new Error(`OCR认证失败: ${error.message}`);
        }
    }

    // 将图片转换为Base64
    async fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
                // 移除data:image/...;base64,前缀
                const base64 = reader.result.split(',')[1];
                resolve(base64);
            };
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    }

    // 使用百度OCR进行图片识别
    async performOCR(file) {
        console.log('=== 开始百度OCR识别 ===');
        console.log('文件信息:', { size: file.size, type: file.type, name: file.name });

        try {
            // 检查API密钥
            if (!this.baiduOCR.apiKey || !this.baiduOCR.secretKey) {
                throw new Error('请先配置百度OCR API密钥');
            }

            // 获取Access Token
            this.showLoadingState('🔐 正在获取API访问权限...');
            const accessToken = await this.getBaiduAccessToken();

            // 转换图片为Base64
            this.showLoadingState('📸 正在处理图片...');
            const base64Image = await this.fileToBase64(file);
            
            console.log('图片Base64长度:', base64Image.length);

            // 调用百度OCR API（通用文字识别-高精度版）
            this.showLoadingState('🔍 正在进行OCR识别...');
            
            const response = await fetch(`https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=${accessToken}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `image=${encodeURIComponent(base64Image)}&detect_direction=true&paragraph=false&probability=false`
            });

            if (!response.ok) {
                throw new Error(`百度OCR API调用失败: ${response.status}`);
            }

            const result = await response.json();
            console.log('百度OCR识别结果:', result);

            if (result.error_code) {
                throw new Error(`百度OCR错误 (${result.error_code}): ${result.error_msg}`);
            }

            if (!result.words_result || result.words_result.length === 0) {
                throw new Error('图片中未识别到文字内容');
            }

            // 合并识别的文字
            const recognizedText = result.words_result
                .map(item => item.words.trim())
                .filter(text => text.length > 0)
                .join('\n');

            console.log('识别文字总行数:', result.words_result.length);
            console.log('合并后文字长度:', recognizedText.length);

            if (recognizedText.length === 0) {
                throw new Error('未识别到有效的文字内容');
            }

            console.log('=== 百度OCR识别完成 ===');
            return recognizedText;

        } catch (error) {
            console.error('百度OCR识别失败:', error);
            
            // 根据错误类型提供更友好的提示
            let errorMessage = error.message;
            if (error.message.includes('111')) {
                errorMessage = 'API密钥无效，请检查API Key和Secret Key是否正确';
            } else if (error.message.includes('17')) {
                errorMessage = 'API调用次数超限，请稍后重试或升级套餐';
            } else if (error.message.includes('18')) {
                errorMessage = 'API QPS超限，请降低调用频率';
            } else if (error.message.includes('216102')) {
                errorMessage = '图片格式不支持，请使用JPG、PNG或WEBP格式';
            } else if (error.message.includes('216103')) {
                errorMessage = '图片文件过大，请使用小于4MB的图片';
            } else if (error.message.includes('282000')) {
                errorMessage = '图片中没有检测到文字';
            }
            
            throw new Error(errorMessage);
        }
    }

    // 修改：处理图片上传 - 增加基本信息验证
    async handleImageUpload(file) {
        if (!file) return;

        // 验证基本信息
        if (!this.validateBasicInfo()) {
            return;
        }

        if (this.isUploading) {
            this.showMessage('🤖 正在处理中，请稍候...', 'info');
            return;
        }

        if (!file.type.startsWith('image/')) {
            this.showMessage('🖼️ 请上传图片文件 (JPG, PNG, WEBP)', 'error');
            return;
        }

        if (file.size > 10 * 1024 * 1024) {
            this.showMessage('📦 图片文件太大，请选择小于10MB的图片', 'error');
            return;
        }

        // 检查百度OCR配置
        if (!this.baiduOCR.apiKey || !this.baiduOCR.secretKey) {
            this.showMessage('🔑 请先配置百度OCR API密钥', 'error');
            return;
        }

        this.isUploading = true;

        try {
            this.showImagePreview(file);
            this.showLoadingState('🔍 正在启动百度OCR识别...');
            
            const ocrResult = await this.performOCR(file);
            this.showOCRResult(ocrResult);
            this.hideLoadingState();
            this.showMessage('✨ OCR识别完成，请查看识别结果', 'success');
            
        } catch (error) {
            this.hideLoadingState();
            console.error('详细错误信息:', error);
            this.showMessage(`❌ 识别失败: ${error.message}`, 'error');
        } finally {
            this.isUploading = false;
            this.resetUploadInput();
        }
    }

    // 显示OCR识别结果
    showOCRResult(ocrText) {
        this.lastOCRResult = ocrText;
        let resultDiv = document.getElementById('ocrResultDiv');

        if (!resultDiv) {
            resultDiv = document.createElement('div');
            resultDiv.id = 'ocrResultDiv';
            resultDiv.className = 'card cute-card';
            resultDiv.style.cssText = `
                background: linear-gradient(135deg, #E5F3FF 0%, #F0FFE5 100%);
                border: 3px solid #4FACFE;
                margin: 20px 0;
                padding: 25px;
                border-radius: 20px;
                box-shadow: 0 8px 25px rgba(79, 172, 254, 0.3);
            `;
            const uploadedImageDiv = document.getElementById('uploadedImage');
            if (uploadedImageDiv && uploadedImageDiv.parentNode) {
                uploadedImageDiv.parentNode.insertBefore(resultDiv, uploadedImageDiv.nextSibling);
            }
        }

        resultDiv.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
                <h4 style="color: #4FACFE; margin-bottom: 10px; font-size: 1.4em;">
                    🔍 百度OCR识别结果
                </h4>
                <p style="color: #666; font-size: 0.9em;">✨ 高精度文字识别完成，接下来可以进行智能解析</p>
            </div>

            <div style="background: white; padding: 20px; border-radius: 15px; border: 2px solid #B6E5FC; margin-bottom: 20px;">
                <h5 style="color: #4FACFE; margin-bottom: 15px;">📝 原始识别文本：</h5>
                <pre style="white-space: pre-wrap; font-size: 14px; line-height: 1.4; margin: 10px 0; color: #333; background: #F8F9FA; padding: 15px; border-radius: 10px; max-height: 200px; overflow-y: auto;">${ocrText}</pre>
            </div>

            <div style="background: white; padding: 20px; border-radius: 15px; border: 2px solid #B6E5FC; margin-bottom: 20px;">
                <h5 style="color: #4FACFE; margin-bottom: 15px;">📊 文本统计：</h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; font-size: 0.9em;">
                    <div style="background: #F0F8FF; padding: 10px; border-radius: 8px; text-align: center;">
                        <strong>📏 字符总数:</strong><br>${ocrText.length}
                    </div>
                    <div style="background: #F0FFF0; padding: 10px; border-radius: 8px; text-align: center;">
                        <strong>📄 行数:</strong><br>${ocrText.split('\n').length}
                    </div>
                    <div style="background: #FFF8DC; padding: 10px; border-radius: 8px; text-align: center;">
                        <strong>🔢 包含数字:</strong><br>${/\d/.test(ocrText) ? '✅ 是' : '❌ 否'}
                    </div>
                    <div style="background: #FFE4E1; padding: 10px; border-radius: 8px; text-align: center;">
                        <strong>🇨🇳 包含中文:</strong><br>${/[\u4e00-\u9fff]/.test(ocrText) ? '✅ 是' : '❌ 否'}
                    </div>
                </div>
            </div>

            <div style="text-align: center; display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
                <button onclick="babyTracker.parseOCRResultManually()" class="btn btn-primary cute-btn" 
                    style="background: linear-gradient(135deg, #4FACFE 0%, #00F2FE 100%); padding: 12px 25px; border-radius: 25px; font-weight: 600; box-shadow: 0 5px 15px rgba(79, 172, 254, 0.4);">
                    🤖 智能解析数据
                </button>
                <button onclick="babyTracker.hideOCRResult()" class="btn btn-secondary cute-btn" 
                    style="background: linear-gradient(135deg, #DDA0DD 0%, #DA70D6 100%); padding: 12px 25px; border-radius: 25px; font-weight: 600;">
                    ❌ 关闭结果
                </button>
            </div>
        `;

        resultDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    // 手动触发OCR结果解析
    async parseOCRResultManually() {
        if (!this.lastOCRResult) {
            this.showMessage('❌ 没有OCR识别结果', 'error');
            return;
        }

        try {
            this.showLoadingState('🤖 正在智能解析表格数据...');
            
            // 步骤1: 本地表格解析
            const localParsedData = this.parseTableStructure(this.lastOCRResult);
            console.log('本地解析结果:', localParsedData);

            // 步骤2: AI验证和补充
            const aiEnhancedData = await this.enhanceDataWithAI(this.lastOCRResult, localParsedData);
            console.log('AI增强结果:', aiEnhancedData);

            // 步骤3: 合并和展示结果
            const finalData = this.mergeDataResults(localParsedData, aiEnhancedData);

            this.showParseResult(finalData);
            this.handleMultipleRecords(finalData);
            this.hideLoadingState();
            this.showMessage(`🎉 成功解析 ${finalData.records ? finalData.records.length : 0} 条体检记录`, 'success');

        } catch (error) {
            this.hideLoadingState();
            this.showMessage(`❌ 解析失败: ${error.message}`, 'error');
            console.error('表格解析错误:', error);
        }
    }

    // 本地表格结构解析
    parseTableStructure(text) {
        console.log('=== 开始本地表格解析 ===');
        const result = {
            records: []
        };

        // 清理文本
        let cleanText = text
            .replace(/[|\[\]{}]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();

        console.log('清理后文本:', cleanText);

        // 分行处理，寻找表格数据
        const lines = cleanText.split('\n').map(line => line.trim()).filter(line => line.length > 0);

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            // 尝试识别表格行数据
            const record = this.parseTableRow(line);
            if (record) {
                console.log(`第${i+1}行识别到记录:`, record);
                result.records.push(record);
            }
        }

        // 按日期排序
        result.records.sort((a, b) => new Date(b.date) - new Date(a.date));

        console.log('本地解析完成，共', result.records.length, '条记录');
        return result;
    }

    // 解析表格行数据
    parseTableRow(line) {
        // 跳过表头行
        if (line.includes('体检日期') || line.includes('年龄') || line.includes('身高') || line.includes('体重')) {
            return null;
        }

        const record = {};

        // 提取日期 (各种格式)
        const datePatterns = [
            /(\d{4}[-\/]\d{1,2}[-\/]\d{1,2})/,
            /(\d{4}年\d{1,2}月\d{1,2}日)/
        ];

        for (const pattern of datePatterns) {
            const match = line.match(pattern);
            if (match) {
                record.date = match[1].replace(/年/g, '-').replace(/月/g, '-').replace(/日/g, '');
                break;
            }
        }

        if (!record.date) return null;

        // 提取年龄并转换为月龄
        const ageMonths = this.extractAgeInMonths(line);
        if (ageMonths !== null) {
            record.ageMonths = ageMonths;
        }

        // 提取体重 (kg)
        const weightMatch = line.match(/(\d+(?:\.\d+)?)\s*(?:kg|公斤)/i);
        if (weightMatch) {
            record.weight = parseFloat(weightMatch[1]);
        } else {
            // 尝试从数字序列中推断体重
            const numbers = line.match(/\d+(?:\.\d+)?/g);
            if (numbers) {
                for (const num of numbers) {
                    const val = parseFloat(num);
                    if (val >= 2 && val <= 30) { // 合理的体重范围
                        record.weight = val;
                        break;
                    }
                }
            }
        }

        // 提取身高 (cm)
        const heightMatch = line.match(/(\d+(?:\.\d+)?)\s*(?:cm|厘米)/i);
        if (heightMatch) {
            record.height = parseFloat(heightMatch[1]);
        } else {
            // 尝试从数字序列中推断身高
            const numbers = line.match(/\d+(?:\.\d+)?/g);
            if (numbers) {
                for (const num of numbers) {
                    const val = parseFloat(num);
                    if (val >= 40 && val <= 120) { // 合理的身高范围
                        record.height = val;
                        break;
                    }
                }
            }
        }

        // 提取头围
        const headMatch = line.match(/(?:头围|头周)[：:\s]*(\d+(?:\.\d+)?)/);
        if (headMatch) {
            record.headCircumference = parseFloat(headMatch[1]);
        } else {
            // 尝试从数字序列中推断头围
            const numbers = line.match(/\d+(?:\.\d+)?/g);
            if (numbers) {
                for (const num of numbers) {
                    const val = parseFloat(num);
                    if (val >= 30 && val <= 60) { // 合理的头围范围
                        record.headCircumference = val;
                        break;
                    }
                }
            }
        }

        // 至少要有体重、身高或头围中的一项
        if (record.weight || record.height || record.headCircumference) {
            return record;
        }

        return null;
    }

    // 提取年龄并转换为月龄
    extractAgeInMonths(text) {
        // 匹配 "1岁2月" 格式
        const ageYearMonthMatch = text.match(/(\d+)岁(\d+)月/);
        if (ageYearMonthMatch) {
            const years = parseInt(ageYearMonthMatch[1]);
            const months = parseInt(ageYearMonthMatch[2]);
            return years * 12 + months;
        }

        // 匹配 "8月0天" 格式
        const ageMonthDayMatch = text.match(/(\d+)月(\d+)天/);
        if (ageMonthDayMatch) {
            const months = parseInt(ageMonthDayMatch[1]);
            const days = parseInt(ageMonthDayMatch[2]);
            return months + (days / 30);
        }

        // 匹配 "13天" 格式
        const ageDayMatch = text.match(/^(\d+)天$/);
        if (ageDayMatch) {
            const days = parseInt(ageDayMatch[1]);
            return days / 30;
        }

        // 匹配纯月份 "8个月"
        const ageMonthMatch = text.match(/(\d+)个月/);
        if (ageMonthMatch) {
            return parseInt(ageMonthMatch[1]);
        }

        return null;
    }

    // 使用AI验证和补充数据
    async enhanceDataWithAI(ocrText, localData) {
        if (!this.deepseekApiKey) {
            console.log('无Deepseek API密钥，跳过AI增强');
            return { records: [] };
        }

        const prompt = `你是体检报告分析专家。请分析以下OCR识别的体检报告文本，提取所有体检记录。

OCR文本：
${ocrText}

本地解析已识别到 ${localData.records.length} 条记录。

请按以下JSON格式返回所有体检记录，特别注意：
1. 年龄格式转换：
   "1岁2月" = 14个月
   "8月0天" = 8个月  
   "6月1天" = 6.03个月
2. 数据验证：体重(2-30kg)、身高(40-120cm)、头围(30-60cm)
3. 只返回JSON，不要其他说明

{
  "records": [
    {
      "date": "2025-04-03",
      "ageMonths": 14.7,
      "weight": 11.4,
      "height": 81.5,
      "headCircumference": 47.5
    }
  ]
}`;

        try {
            const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.deepseekApiKey}`
                },
                body: JSON.stringify({
                    model: "deepseek-chat",
                    messages: [{ role: "user", content: prompt }],
                    max_tokens: 1500,
                    temperature: 0.1
                })
            });

            if (!response.ok) {
                throw new Error(`AI API调用失败: ${response.status}`);
            }

            const data = await response.json();
            const aiResponse = data.choices[0].message.content;

            console.log('AI原始响应:', aiResponse);

            // 尝试解析JSON
            const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                return JSON.parse(jsonMatch[0]);
            } else {
                throw new Error('AI返回格式错误');
            }

        } catch (error) {
            console.error('AI增强失败:', error);
            return { records: [] };
        }
    }

    // 合并本地解析和AI结果
    mergeDataResults(localData, aiData) {
        console.log('=== 合并解析结果 ===');
        const merged = {
            records: []
        };

        // 合并记录，优先使用本地解析结果，AI结果作为补充
        const allRecords = [...localData.records];

        if (aiData.records && Array.isArray(aiData.records)) {
            for (const aiRecord of aiData.records) {
                // 检查是否已存在相同日期的记录
                const existing = allRecords.find(r => r.date === aiRecord.date);
                if (!existing) {
                    allRecords.push(aiRecord);
                } else {
                    // 合并数据，补充缺失字段
                    if (!existing.weight && aiRecord.weight) existing.weight = aiRecord.weight;
                    if (!existing.height && aiRecord.height) existing.height = aiRecord.height;
                    if (!existing.headCircumference && aiRecord.headCircumference) existing.headCircumference = aiRecord.headCircumference;
                    if (!existing.ageMonths && aiRecord.ageMonths) existing.ageMonths = aiRecord.ageMonths;
                }
            }
        }

        // 数据验证和清理
        merged.records = allRecords.filter(record => {
            // 必须有日期
            if (!record.date) return false;

            // 验证数据范围
            if (record.weight && (record.weight < 1 || record.weight > 50)) return false;
            if (record.height && (record.height < 30 || record.height > 150)) return false;
            if (record.headCircumference && (record.headCircumference < 25 || record.headCircumference > 65)) return false;

            // 至少要有一项测量数据
            return record.weight || record.height || record.headCircumference;
        });

        // 按日期排序
        merged.records.sort((a, b) => new Date(b.date) - new Date(a.date));

        console.log('合并完成，最终记录数:', merged.records.length);
        return merged;
    }

    // 显示可编辑的解析结果
    showParseResult(extractedData) {
        let parseDiv = document.getElementById('parseResultDiv');

        if (!parseDiv) {
            parseDiv = document.createElement('div');
            parseDiv.id = 'parseResultDiv';
            parseDiv.className = 'card cute-card';
            parseDiv.style.cssText = `
                background: linear-gradient(135deg, #FFE5F1 0%, #FFE5E5 100%);
                border: 3px solid #FF69B4;
                margin: 20px 0;
                padding: 25px;
                border-radius: 20px;
                box-shadow: 0 8px 25px rgba(255, 105, 180, 0.3);
            `;
            const ocrDiv = document.getElementById('ocrResultDiv');
            if (ocrDiv && ocrDiv.parentNode) {
                ocrDiv.parentNode.insertBefore(parseDiv, ocrDiv.nextSibling);
            }
        }

        const recordsCount = extractedData.records ? extractedData.records.length : 0;

        parseDiv.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
                <h4 style="color: #FF1493; margin-bottom: 10px; font-size: 1.4em;">
                    🎯 智能识别结果
                    <span style="background: #FF69B4; color: white; padding: 5px 12px; border-radius: 15px; font-size: 0.8em;">${recordsCount}条记录</span>
                </h4>
                <p style="color: #666; font-size: 0.9em;">💡 可以编辑下方数据，确保准确性后再添加到记录中</p>
            </div>

            <div style="background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1; margin-bottom: 20px;">
                <h5 style="color: #FF1493; margin-bottom: 15px; display: flex; align-items: center;">
                    <span>📊 识别概况</span>
                </h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; font-size: 0.9em;">
                    <div style="background: #FFF0F5; padding: 10px; border-radius: 10px;">
                        <strong>📈 识别记录数:</strong> ${recordsCount}
                    </div>
                    <div style="background: #F0F8FF; padding: 10px; border-radius: 10px;">
                        <strong>🤖 解析方式:</strong> 百度OCR + AI增强
                    </div>
                    <div style="background: #F0FFF0; padding: 10px; border-radius: 10px;">
                        <strong>✅ 数据完整性:</strong> ${this.getDataCompleteness(extractedData.records)}
                    </div>
                </div>
            </div>

            ${this.generateEditableRecordsHtml(extractedData.records)}

            <div style="text-align: center; margin-top: 20px; display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
                <button onclick="babyTracker.saveEditedRecords()" class="btn btn-success cute-btn" 
                    style="background: linear-gradient(135deg, #FF69B4 0%, #FF1493 100%); padding: 12px 25px; border-radius: 25px; font-weight: 600; box-shadow: 0 5px 15px rgba(255, 105, 180, 0.4);">
                    ✨ 保存并添加记录
                </button>
                <button onclick="babyTracker.hideOCRResult()" class="btn btn-secondary cute-btn" 
                    style="background: linear-gradient(135deg, #DDA0DD 0%, #DA70D6 100%); padding: 12px 25px; border-radius: 25px; font-weight: 600;">
                    ❌ 取消
                </button>
            </div>
        `;

        parseDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    // 生成可编辑的记录HTML
    generateEditableRecordsHtml(records) {
        if (!records || records.length === 0) {
            return `
                <div style="background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1; text-align: center;">
                    <p style="color: #888; font-size: 1.1em;">🤔 未识别到有效记录</p>
                    <p style="color: #666; font-size: 0.9em;">请检查图片是否清晰，或尝试手动添加记录</p>
                </div>
            `;
        }

        let html = `
            <div style="background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1;">
                <h5 style="color: #FF1493; margin-bottom: 15px; display: flex; align-items: center;">
                    <span>✏️ 编辑识别数据</span>
                    <span style="margin-left: auto; font-size: 0.8em; color: #888;">点击表格单元格可编辑</span>
                </h5>
                <div style="overflow-x: auto;">
                    <table id="editableRecordsTable" style="width: 100%; border-collapse: collapse; font-size: 0.9em;">
                        <thead>
                            <tr style="background: linear-gradient(135deg, #FFB6C1 0%, #FFC0CB 100%);">
                                <th style="padding: 12px 8px; border: 1px solid #FF69B4; color: #8B008B; font-weight: 600;">📅 体检日期</th>
                                <th style="padding: 12px 8px; border: 1px solid #FF69B4; color: #8B008B; font-weight: 600;">👶 月龄</th>
                                <th style="padding: 12px 8px; border: 1px solid #FF69B4; color: #8B008B; font-weight: 600;">📏 身高(cm)</th>
                                <th style="padding: 12px 8px; border: 1px solid #FF69B4; color: #8B008B; font-weight: 600;">⚖️ 体重(kg)</th>
                                <th style="padding: 12px 8px; border: 1px solid #FF69B4; color: #8B008B; font-weight: 600;">🧠 头围(cm)</th>
                                <th style="padding: 12px 8px; border: 1px solid #FF69B4; color: #8B008B; font-weight: 600;">🛠️ 操作</th>
                            </tr>
                        </thead>
                        <tbody>
        `;

        records.forEach((record, index) => {
            html += `
                <tr data-index="${index}" style="background: ${index % 2 === 0 ? '#FFF8DC' : '#F0F8FF'};">
                    <td style="padding: 10px 8px; border: 1px solid #FFB6C1;">
                        <input type="date" value="${record.date || ''}" 
                            onchange="babyTracker.updateEditedRecord(${index}, 'date', this.value)"
                            style="width: 100%; border: none; background: transparent; text-align: center; font-size: 0.9em;">
                    </td>
                    <td style="padding: 10px 8px; border: 1px solid #FFB6C1;">
                        <input type="number" step="0.1" value="${record.ageMonths || ''}" 
                            onchange="babyTracker.updateEditedRecord(${index}, 'ageMonths', this.value)"
                            style="width: 100%; border: none; background: transparent; text-align: center; font-size: 0.9em;" placeholder="月">
                    </td>
                    <td style="padding: 10px 8px; border: 1px solid #FFB6C1;">
                        <input type="number" step="0.1" value="${record.height || ''}" 
                            onchange="babyTracker.updateEditedRecord(${index}, 'height', this.value)"
                            style="width: 100%; border: none; background: transparent; text-align: center; font-size: 0.9em;" placeholder="cm">
                    </td>
                    <td style="padding: 10px 8px; border: 1px solid #FFB6C1;">
                        <input type="number" step="0.1" value="${record.weight || ''}" 
                            onchange="babyTracker.updateEditedRecord(${index}, 'weight', this.value)"
                            style="width: 100%; border: none; background: transparent; text-align: center; font-size: 0.9em;" placeholder="kg">
                    </td>
                    <td style="padding: 10px 8px; border: 1px solid #FFB6C1;">
                        <input type="number" step="0.1" value="${record.headCircumference || ''}" 
                            onchange="babyTracker.updateEditedRecord(${index}, 'headCircumference', this.value)"
                            style="width: 100%; border: none; background: transparent; text-align: center; font-size: 0.9em;" placeholder="cm">
                    </td>
                    <td style="padding: 10px 8px; border: 1px solid #FFB6C1; text-align: center;">
                        <button onclick="babyTracker.deleteEditedRecord(${index})" 
                            style="background: linear-gradient(135deg, #FF6B6B 0%, #FF5252 100%); color: white; border: none; border-radius: 15px; padding: 5px 10px; font-size: 0.8em; cursor: pointer;">
                            🗑️ 删除
                        </button>
                    </td>
                </tr>
            `;
        });

        html += `
                        </tbody>
                    </table>
                </div>
                <div style="text-align: center; margin-top: 15px;">
                    <button onclick="babyTracker.addNewEditedRecord()" 
                        style="background: linear-gradient(135deg, #98FB98 0%, #90EE90 100%); color: #006400; border: none; border-radius: 20px; padding: 10px 20px; font-weight: 600; cursor: pointer; box-shadow: 0 3px 10px rgba(152, 251, 152, 0.4);">
                        ➕ 添加新记录
                    </button>
                </div>
            </div>
        `;

        return html;
    }

    // 更新编辑的记录
    updateEditedRecord(index, field, value) {
        if (!this.tempExtractedData || !this.tempExtractedData.records) {
            return;
        }

        if (this.tempExtractedData.records[index]) {
            if (field === 'ageMonths' || field === 'height' || field === 'weight' || field === 'headCircumference') {
                this.tempExtractedData.records[index][field] = value ? parseFloat(value) : null;
            } else {
                this.tempExtractedData.records[index][field] = value;
            }

            console.log('更新记录:', index, field, value);
            this.validateEditedRecord(index);
        }
    }

    // 验证编辑的记录
    validateEditedRecord(index) {
        const record = this.tempExtractedData.records[index];
        const row = document.querySelector(`tr[data-index="${index}"]`);
        if (!row) return;

        // 重置所有输入框的样式
        const inputs = row.querySelectorAll('input');
        inputs.forEach(input => {
            input.style.border = 'none';
            input.style.background = 'transparent';
        });

        // 验证数据范围
        let hasError = false;

        if (record.weight && (record.weight < 1 || record.weight > 50)) {
            const weightInput = row.querySelector('input[onchange*="weight"]');
            if (weightInput) {
                weightInput.style.border = '2px solid #FF6B6B';
                weightInput.style.background = '#FFE5E5';
            }
            hasError = true;
        }

        if (record.height && (record.height < 30 || record.height > 150)) {
            const heightInput = row.querySelector('input[onchange*="height"]');
            if (heightInput) {
                heightInput.style.border = '2px solid #FF6B6B';
                heightInput.style.background = '#FFE5E5';
            }
            hasError = true;
        }

        if (record.headCircumference && (record.headCircumference < 25 || record.headCircumference > 65)) {
            const headInput = row.querySelector('input[onchange*="headCircumference"]');
            if (headInput) {
                headInput.style.border = '2px solid #FF6B6B';
                headInput.style.background = '#FFE5E5';
            }
            hasError = true;
        }

        if (hasError) {
            this.showMessage('⚠️ 请检查数据范围：体重(1-50kg)、身高(30-150cm)、头围(25-65cm)', 'warning');
        }
    }

    // 删除编辑的记录
    deleteEditedRecord(index) {
        if (!this.tempExtractedData || !this.tempExtractedData.records) {
            return;
        }

        if (confirm('🤔 确定要删除这条记录吗？')) {
            this.tempExtractedData.records.splice(index, 1);
            this.showParseResult(this.tempExtractedData);
            this.showMessage('✅ 记录已删除', 'success');
        }
    }

    // 添加新的编辑记录
    addNewEditedRecord() {
        if (!this.tempExtractedData) {
            this.tempExtractedData = { records: [] };
        }

        const newRecord = {
            date: new Date().toISOString().split('T')[0],
            ageMonths: null,
            height: null,
            weight: null,
            headCircumference: null
        };

        this.tempExtractedData.records.push(newRecord);
        this.showParseResult(this.tempExtractedData);
        this.showMessage('✨ 已添加新记录，请填写数据', 'info');
    }

    // 保存编辑后的记录
    saveEditedRecords() {
        if (!this.tempExtractedData || !this.tempExtractedData.records) {
            this.showMessage('❌ 没有可保存的记录', 'error');
            return;
        }

        // 过滤掉无效记录
        const validRecords = this.tempExtractedData.records.filter(record => {
            return record.date && (record.height || record.weight || record.headCircumference);
        });

        if (validRecords.length === 0) {
            this.showMessage('❌ 没有有效的记录数据', 'error');
            return;
        }

        this.tempExtractedData.records = validRecords;
        this.addAllRecords();
    }

    // 获取数据完整性描述
    getDataCompleteness(records) {
        if (!records || records.length === 0) return '无数据';

        let completeCount = 0;
        records.forEach(record => {
            if (record.weight && record.height && record.headCircumference && record.ageMonths) {
                completeCount++;
            }
        });

        return `${completeCount}/${records.length} 条记录数据完整`;
    }

    // 处理多条记录
    handleMultipleRecords(extractedData) {
        console.log('=== 处理多条记录 ===');
        // 保存提取的数据到临时变量
        this.tempExtractedData = extractedData;
        console.log('识别到体检记录数量:', extractedData.records?.length || 0);
    }

    // 添加所有识别的记录
    addAllRecords() {
        if (!this.tempExtractedData || !this.tempExtractedData.records) {
            this.showMessage('❌ 没有可添加的记录', 'error');
            return;
        }

        const gender = this.babyInfo.gender || 'male';
        let addedCount = 0;

        this.tempExtractedData.records.forEach(record => {
            // 检查是否已存在相同日期的记录
            const existing = this.checkRecords.find(r => r.checkDate === record.date);
            if (!existing) {
                const recordWithPercentiles = {
                    checkDate: record.date,
                    ageMonths: record.ageMonths,
                    height: record.height,
                    weight: record.weight,
                    headCircumference: record.headCircumference,
                    id: Date.now() + Math.random(),
                    addedAt: new Date().toISOString(),
                    heightPercentile: record.height ? this.calculateWHOPercentileWithLinearInterpolation(record.ageMonths, record.height, 'height', gender) : null,
                    weightPercentile: record.weight ? this.calculateWHOPercentileWithLinearInterpolation(record.ageMonths, record.weight, 'weight', gender) : null,
                    headPercentile: record.headCircumference ? this.calculateWHOPercentileWithLinearInterpolation(record.ageMonths, record.headCircumference, 'headCircumference', gender) : null
                };

                this.checkRecords.push(recordWithPercentiles);
                addedCount++;
            }
        });

        if (addedCount > 0) {
            this.saveData();
            this.updateRecordsTable();
            this.updateCurrentStatus();
            this.updateChart();
            this.showMessage(`🎉 成功添加 ${addedCount} 条体检记录`, 'success');
        } else {
            this.showMessage('ℹ️ 所有记录已存在，未添加新记录', 'info');
        }

        this.hideOCRResult();
        this.tempExtractedData = null;
    }

    // 隐藏OCR结果
    hideOCRResult() {
        const ocrDiv = document.getElementById('ocrResultDiv');
        const parseDiv = document.getElementById('parseResultDiv');
        if (ocrDiv) ocrDiv.remove();
        if (parseDiv) parseDiv.remove();
    }

    // 重置上传输入框
    resetUploadInput() {
        const reportUpload = document.getElementById('reportUpload');
        if (reportUpload) {
            reportUpload.value = '';
        }
    }

    // 显示图片预览
    showImagePreview(file) {
        const uploadedImageDiv = document.getElementById('uploadedImage');
        const previewImage = document.getElementById('previewImage');

        if (uploadedImageDiv && previewImage) {
            const reader = new FileReader();
            reader.onload = (e) => {
                previewImage.src = e.target.result;
                uploadedImageDiv.classList.remove('hidden');
            };
            reader.readAsDataURL(file);
        }
    }

    // 实时更新百分位数
    updatePercentiles() {
        const ageMonths = parseFloat(document.getElementById('ageMonths')?.value) || null;
        const height = parseFloat(document.getElementById('height')?.value) || null;
        const weight = parseFloat(document.getElementById('weight')?.value) || null;
        const headCircumference = parseFloat(document.getElementById('headCircumference')?.value) || null;

        console.log('计算百分位 - 年龄:', ageMonths, '身高:', height, '体重:', weight, '头围:', headCircumference);

        if (!ageMonths) {
            this.updatePercentileDisplay({
                height: null,
                weight: null,
                headCircumference: null
            });
            return;
        }

        const gender = this.babyInfo.gender || 'male';
        const percentiles = {
            height: this.calculateWHOPercentileWithLinearInterpolation(ageMonths, height, 'height', gender),
            weight: this.calculateWHOPercentileWithLinearInterpolation(ageMonths, weight, 'weight', gender),
            headCircumference: this.calculateWHOPercentileWithLinearInterpolation(ageMonths, headCircumference, 'headCircumference', gender)
        };

        console.log('计算出的百分位:', percentiles);
        this.updatePercentileDisplay(percentiles);
    }

    // WHO标准百分位计算 (线性插值版本)
    calculateWHOPercentileWithLinearInterpolation(ageMonths, value, type, gender) {
        if (!value || !ageMonths) return null;

        console.log(`\n=== 计算${type}百分位 (线性插值) ===`);
        console.log(`年龄: ${ageMonths}月, ${type}: ${value}, 性别: ${gender}`);

        // 获取对应的WHO数据
        let dataKey;
        if (type === 'height') {
            dataKey = gender === 'female' ? 'femaleHeight' : 'maleHeight';
        } else if (type === 'weight') {
            dataKey = gender === 'female' ? 'femaleWeight' : 'maleWeight';
        } else if (type === 'headCircumference') {
            dataKey = gender === 'female' ? 'femaleHeadCircumference' : 'maleHeadCircumference';
        }

        const whoDataSource = this.whoData[dataKey];

        // 确定年龄边界
        const lowerAge = Math.floor(ageMonths);
        const upperAge = Math.ceil(ageMonths);

        console.log(`年龄边界: ${lowerAge}月 到 ${upperAge}月`);

        // 如果是整数月龄，直接使用现有数据
        if (lowerAge === upperAge) {
            const whoRecord = whoDataSource[lowerAge];
            if (!whoRecord) {
                console.log(`❌ 没有找到${lowerAge}月龄的WHO数据`);
                return null;
            }
            return this.calculatePercentileFromWHOData(value, whoRecord, `${lowerAge}月整数月龄`);
        }

        // 检查边界数据是否存在
        const lowerWHOData = whoDataSource[lowerAge];
        const upperWHOData = whoDataSource[upperAge];

        if (!lowerWHOData || !upperWHOData) {
            console.log(`❌ 缺少WHO数据: ${lowerAge}月=${!!lowerWHOData}, ${upperAge}月=${!!upperWHOData}`);
            return null;
        }

        // 计算插值比例
        const ratio = ageMonths - lowerAge;
        console.log(`插值比例: (${ageMonths} - ${lowerAge}) = ${ratio}`);

        // 对WHO数据的七个百分位点进行线性插值
        const interpolatedWHOData = [];
        for (let i = 0; i < 7; i++) {
            const interpolatedValue = lowerWHOData[i] + ratio * (upperWHOData[i] - lowerWHOData[i]);
            interpolatedWHOData.push(parseFloat(interpolatedValue.toFixed(2)));
        }

        console.log(`${lowerAge}月WHO数据:`, lowerWHOData);
        console.log(`${upperAge}月WHO数据:`, upperWHOData);
        console.log(`插值后WHO数据:`, interpolatedWHOData);

        // 基于插值后的数据计算百分位
        return this.calculatePercentileFromWHOData(value, interpolatedWHOData, `${ageMonths}月插值数据`);
    }

    // 基于WHO数据计算百分位
    calculatePercentileFromWHOData(value, whoData, description) {
        console.log(`\n--- 基于${description}计算百分位 ---`);

        // WHO数据: [-3SD, -2SD, -1SD, 中位数, +1SD, +2SD, +3SD]
        const [sd3neg, sd2neg, sd1neg, median, sd1pos, sd2pos, sd3pos] = whoData;

        console.log(`WHO标准数据:`);
        console.log(`  -3SD: ${sd3neg}`);
        console.log(`  -2SD: ${sd2neg}`);
        console.log(`  -1SD: ${sd1neg}`);
        console.log(`  中位数: ${median}`);
        console.log(`  +1SD: ${sd1pos}`);
        console.log(`  +2SD: ${sd2pos}`);
        console.log(`  +3SD: ${sd3pos}`);

        // 确定数值位于哪个标准差区间
        let interval = '';
        let percentile = null;

        if (value <= sd3neg) {
            interval = '< -3SD (严重偏低)';
            percentile = 0.1;
        } else if (value <= sd2neg) {
            interval = '-3SD 到 -2SD 之间 (偏低)';
            const ratio = (value - sd3neg) / (sd2neg - sd3neg);
            percentile = 0.1 + ratio * (2.3 - 0.1);
        } else if (value <= sd1neg) {
            interval = '-2SD 到 -1SD 之间 (稍低)';
            const ratio = (value - sd2neg) / (sd1neg - sd2neg);
            percentile = 2.3 + ratio * (15.9 - 2.3);
        } else if (value <= median) {
            interval = '-1SD 到 中位数 之间 (正常偏低)';
            const ratio = (value - sd1neg) / (median - sd1neg);
            percentile = 15.9 + ratio * (50 - 15.9);
        } else if (value <= sd1pos) {
            interval = '中位数 到 +1SD 之间 (正常偏高)';
            const ratio = (value - median) / (sd1pos - median);
            percentile = 50 + ratio * (84.1 - 50);
        } else if (value <= sd2pos) {
            interval = '+1SD 到 +2SD 之间 (稍高)';
            const ratio = (value - sd1pos) / (sd2pos - sd1pos);
            percentile = 84.1 + ratio * (97.7 - 84.1);
        } else if (value <= sd3pos) {
            interval = '+2SD 到 +3SD 之间 (偏高)';
            const ratio = (value - sd2pos) / (sd3pos - sd2pos);
            percentile = 97.7 + ratio * (99.9 - 97.7);
        } else {
            interval = '> +3SD (严重偏高)';
            percentile = 99.9;
        }

        console.log(`📊 标准差区间: ${interval}`);
        console.log(`📈 计算百分位: ${percentile?.toFixed(1)}%`);

        const finalPercentile = Math.max(0.1, Math.min(99.9, Math.round(percentile * 10) / 10));
        console.log(`✅ 最终百分位: ${finalPercentile}%`);
        console.log(`--- 计算完成 ---\n`);

        return finalPercentile;
    }

    // 更新百分位显示
    updatePercentileDisplay(percentiles) {
        const heightPercentileEl = document.getElementById('heightPercentile');
        const weightPercentileEl = document.getElementById('weightPercentile');
        const headPercentileEl = document.getElementById('headPercentile');

        if (heightPercentileEl) {
            heightPercentileEl.textContent = percentiles.height !== null ? `${percentiles.height}%` : '--';
        }
        if (weightPercentileEl) {
            weightPercentileEl.textContent = percentiles.weight !== null ? `${percentiles.weight}%` : '--';
        }
        if (headPercentileEl) {
            headPercentileEl.textContent = percentiles.headCircumference !== null ? `${percentiles.headCircumference}%` : '--';
        }
    }

    // 初始化生长曲线图表
    initializeChart() {
        const ctx = document.getElementById('growthChart');
        if (!ctx) return;

        // 如果Chart.js未加载，跳过图表初始化
        if (typeof Chart === 'undefined') {
            console.warn('Chart.js未加载，跳过图表初始化');
            return;
        }

        // 初始化图表配置
        const config = {
            type: 'line',
            data: {
                labels: [], // 月龄
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: '🌈 生长发育曲线图'
                    },
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: '年龄 (月)'
                        },
                        min: 0,
                        max: 36
                    },
                    y: {
                        title: {
                            display: true,
                            text: '数值'
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        };

        this.growthChart = new Chart(ctx, config);
        this.updateChart();
    }

    // 更新生长曲线图表
    updateChart() {
        if (!this.growthChart) return;

        const gender = this.babyInfo.gender || 'male';
        const chartType = document.querySelector('input[name="chartType"]:checked')?.value || 'height';

        // 获取WHO标准数据
        const whoKey = gender === 'female' ? `female${chartType.charAt(0).toUpperCase()}${chartType.slice(1)}` : `male${chartType.charAt(0).toUpperCase()}${chartType.slice(1)}`;
        const whoData = this.whoData[whoKey] || this.whoData.maleHeight;

        // 生成月龄标签 (0-36个月)
        const ageLabels = [];
        for (let i = 0; i <= 36; i++) {
            ageLabels.push(i);
        }

        // 准备WHO标准线数据
        const standardLines = [
            {
                label: '-2SD (3%)',
                data: [],
                borderColor: '#ff6b6b',
                backgroundColor: 'transparent',
                borderWidth: 1,
                pointRadius: 0
            },
            {
                label: '-1SD (15%)',
                data: [],
                borderColor: '#ffa726',
                backgroundColor: 'transparent',
                borderWidth: 1,
                pointRadius: 0
            },
            {
                label: '中位数 (50%)',
                data: [],
                borderColor: '#4caf50',
                backgroundColor: 'transparent',
                borderWidth: 2,
                pointRadius: 0
            },
            {
                label: '+1SD (85%)',
                data: [],
                borderColor: '#ffa726',
                backgroundColor: 'transparent',
                borderWidth: 1,
                pointRadius: 0
            },
            {
                label: '+2SD (97%)',
                data: [],
                borderColor: '#ff6b6b',
                backgroundColor: 'transparent',
                borderWidth: 1,
                pointRadius: 0
            }
        ];

        // 填充WHO标准数据
        ageLabels.forEach(age => {
            const whoRecord = whoData[age];
            if (whoRecord) {
                standardLines[0].data.push(whoRecord[1]); // -2SD
                standardLines[1].data.push(whoRecord[2]); // -1SD
                standardLines[2].data.push(whoRecord[3]); // 中位数
                standardLines[3].data.push(whoRecord[4]); // +1SD
                standardLines[4].data.push(whoRecord[5]); // +2SD
            } else {
                standardLines.forEach(line => line.data.push(null));
            }
        });

        // 准备宝宝实际数据
        const babyData = {
            label: '🍼 宝宝实际数据',
            data: new Array(37).fill(null),
            borderColor: '#2196f3',
            backgroundColor: '#2196f3',
            borderWidth: 3,
            pointRadius: 5,
            pointHoverRadius: 7
        };

        // 填充宝宝的实际数据
        this.checkRecords.forEach(record => {
            const age = Math.round(record.ageMonths);
            let value = null;

            switch(chartType) {
                case 'height':
                    value = record.height;
                    break;
                case 'weight':
                    value = record.weight;
                    break;
                case 'headCircumference':
                    value = record.headCircumference;
                    break;
            }

            if (value && age >= 0 && age <= 36) {
                babyData.data[age] = value;
            }
        });

        // 更新图表数据
        this.growthChart.data.labels = ageLabels;
        this.growthChart.data.datasets = [...standardLines, babyData];

        // 更新Y轴标题
        let yAxisTitle = '';
        switch(chartType) {
            case 'height':
                yAxisTitle = '身高 (cm)';
                break;
            case 'weight':
                yAxisTitle = '体重 (kg)';
                break;
            case 'headCircumference':
                yAxisTitle = '头围 (cm)';
                break;
        }

        this.growthChart.options.scales.y.title.text = yAxisTitle;
        this.growthChart.update();
    }

    // 获取最新体检记录
    getLatestRecord() {
        if (this.checkRecords.length === 0) {
            return null;
        }

        // 按日期排序，获取最新的一条记录
        const sortedRecords = [...this.checkRecords].sort((a, b) => new Date(b.checkDate) - new Date(a.checkDate));
        return sortedRecords[0];
    }

    // 分析生长趋势
    analyzeGrowthTrend() {
        if (this.checkRecords.length < 2) {
            return {
                trend: '数据不足',
                description: '需要至少2次体检记录才能分析生长趋势'
            };
        }

        // 按日期排序
        const sortedRecords = [...this.checkRecords].sort((a, b) => new Date(a.checkDate) - new Date(b.checkDate));
        const latest = sortedRecords[sortedRecords.length - 1];
        const previous = sortedRecords[sortedRecords.length - 2];

        const trends = [];

        // 分析身高趋势
        if (latest.height && previous.height && latest.heightPercentile && previous.heightPercentile) {
            const heightChange = latest.heightPercentile - previous.heightPercentile;
            if (heightChange > 5) {
                trends.push('身高增长良好');
            } else if (heightChange < -5) {
                trends.push('身高增长放缓');
            } else {
                trends.push('身高稳步增长');
            }
        }

        // 分析体重趋势
        if (latest.weight && previous.weight && latest.weightPercentile && previous.weightPercentile) {
            const weightChange = latest.weightPercentile - previous.weightPercentile;
            if (weightChange > 5) {
                trends.push('体重增长良好');
            } else if (weightChange < -5) {
                trends.push('体重增长放缓');
            } else {
                trends.push('体重稳步增长');
            }
        }

        // 分析头围趋势
        if (latest.headCircumference && previous.headCircumference && latest.headPercentile && previous.headPercentile) {
            const headChange = latest.headPercentile - previous.headPercentile;
            if (headChange > 5) {
                trends.push('头围增长良好');
            } else if (headChange < -5) {
                trends.push('头围增长放缓');
            } else {
                trends.push('头围稳步增长');
            }
        }

        return {
            trend: trends.length > 0 ? trends.join('，') : '生长正常',
            description: `基于最近两次体检记录的对比分析（${previous.checkDate} vs ${latest.checkDate}）`
        };
    }

    // 生成AI喂养指导
    async generateAIFeedingGuide() {
        console.log('=== 开始生成AI喂养指导 ===');
        console.log('调试信息:');
        console.log('- 基本信息:', this.babyInfo);
        console.log('- 体检记录数量:', this.checkRecords.length);
        console.log('- API密钥状态:', !!this.deepseekApiKey);

        // 验证基本信息
        if (!this.validateBasicInfo()) {
            return;
        }

                if (this.checkRecords.length === 0) {
            this.showMessage('🍼 请先添加体检记录', 'error');
            return;
        }

        if (!this.deepseekApiKey || this.deepseekApiKey.trim() === '') {
            this.showMessage('🔑 请先设置Deepseek API密钥', 'error');
            return;
        }

        // 获取最新体检记录
        const latestRecord = this.getLatestRecord();
        if (!latestRecord) {
            this.showMessage('❌ 无法获取最新体检记录', 'error');
            return;
        }

        console.log('最新体检记录:', latestRecord);

        // 分析生长趋势
        const growthTrend = this.analyzeGrowthTrend();
        console.log('生长趋势分析:', growthTrend);

        const concernsInput = document.getElementById('feedingConcerns');
        const concerns = concernsInput ? concernsInput.value.trim() : '';

        const feedingLoading = document.getElementById('feedingLoading');
        const feedingGuide = document.getElementById('feedingGuide');

        console.log('DOM元素检查:');
        console.log('- feedingLoading:', !!feedingLoading);
        console.log('- feedingGuide:', !!feedingGuide);

        if (feedingLoading) feedingLoading.classList.remove('hidden');
        if (feedingGuide) feedingGuide.classList.add('hidden');

        try {
            // 分析健康状况
            const healthAnalysis = this.analyzeHealthStatus(latestRecord);
            console.log('健康分析:', healthAnalysis);

            // 调用Deepseek API生成个性化建议
            this.showLoadingState('🤖 正在生成AI喂养建议...');
            const aiGuide = await this.callDeepseekForFeedingGuide(latestRecord, healthAnalysis, growthTrend, concerns);
            console.log('AI建议生成完成，字符数:', aiGuide.length);

            this.displayAIFeedingGuide(aiGuide, healthAnalysis, growthTrend, concerns);

            if (feedingLoading) feedingLoading.classList.add('hidden');
            if (feedingGuide) feedingGuide.classList.remove('hidden');

            this.hideLoadingState();
            this.showMessage('✨ AI喂养建议生成完成', 'success');

        } catch (error) {
            if (feedingLoading) feedingLoading.classList.add('hidden');
            this.hideLoadingState();
            this.showMessage(`❌ 生成AI喂养建议失败: ${error.message}`, 'error');
            console.error('AI指导生成错误:', error);
        }
    }

    // 分析健康状况
    analyzeHealthStatus(record) {
        const issues = [];
        const recommendations = [];

        // 分析身高
        if (record.height && record.heightPercentile) {
            if (record.heightPercentile < 10) {
                issues.push('身高偏低');
                recommendations.push('注意营养补充，建议咨询儿科医生');
            } else if (record.heightPercentile > 90) {
                issues.push('身高偏高');
                recommendations.push('继续保持良好的营养状态');
            }
        }

        // 分析体重
        if (record.weight && record.weightPercentile) {
            if (record.weightPercentile < 10) {
                issues.push('体重偏轻');
                recommendations.push('需要增加营养密度，增加喂养频次');
            } else if (record.weightPercentile > 90) {
                issues.push('体重超重');
                recommendations.push('控制高热量食物，增加活动量');
            }
        }

        // 分析头围
        if (record.headCircumference && record.headPercentile) {
            if (record.headPercentile < 10) {
                issues.push('头围偏小');
                recommendations.push('建议咨询儿科医生，关注神经系统发育');
            } else if (record.headPercentile > 90) {
                issues.push('头围偏大');
                recommendations.push('建议咨询儿科医生，排除相关疾病');
            }
        }

        // 分析BMI（如果有身高体重数据）
        if (record.height && record.weight) {
            const bmi = record.weight / Math.pow(record.height / 100, 2);
            if (bmi > 18) {
                issues.push('BMI偏高');
                recommendations.push('注意饮食结构，避免过度喂养');
            } else if (bmi < 14) {
                issues.push('BMI偏低');
                recommendations.push('增加营养摄入，关注生长发育');
            }
        }

        return {
            issues: issues.length > 0 ? issues : ['生长发育正常'],
            recommendations,
            riskLevel: issues.length > 0 ? '需要关注' : '正常'
        };
    }

    // 调用Deepseek API生成喂养建议
    async callDeepseekForFeedingGuide(record, healthAnalysis, growthTrend, concerns) {
        console.log('开始调用Deepseek API生成喂养建议');

        let prompt = `作为专业的儿科营养师，请为以下婴幼儿生成个性化的喂养指导建议：

# 宝宝基本信息
- 姓名：${this.babyInfo.name || '未知'}
- 性别：${this.babyInfo.gender === 'female' ? '女' : '男'}
- 出生日期：${this.babyInfo.birthDate || '未知'}

# 最新体检数据（${record.checkDate}）
- 年龄：${record.ageMonths}个月
- 身高：${record.height || '未知'}cm (百分位：${record.heightPercentile || '未知'}%)
- 体重：${record.weight || '未知'}kg (百分位：${record.weightPercentile || '未知'}%)
- 头围：${record.headCircumference || '未知'}cm (百分位：${record.headPercentile || '未知'}%)

# 健康状况分析
主要问题：${healthAnalysis.issues.join('、')}
风险等级：${healthAnalysis.riskLevel}

# 生长趋势分析
趋势：${growthTrend.trend}
分析基础：${growthTrend.description}`;

        // 如果有重点关注问题，添加到提示中
        if (concerns) {
            prompt += `

# 家长重点关注
${concerns}

请特别针对以上关注点提供详细的解决方案和建议。`;
        }

        prompt += `

请提供以下三个方面的详细建议，要求专业、实用、针对性强：

### 1. 每日营养需求
根据年龄、性别、当前生长状况和趋势，提供具体的营养摄入建议，包括热量、蛋白质、维生素、矿物质等需求。

### 2. 食物推荐
推荐适合的食物种类、制作方法和注意事项，考虑年龄特点和个体差异。

### 3. 喂养技巧
提供实用的喂养方法、时间安排和注意事项，结合生长趋势给出调整建议。

如果存在健康问题或生长趋势异常，请重点关注并提供针对性的改善建议。回复请用中文，条理清晰，内容详实。`;

        console.log('发送的提示词长度:', prompt.length);

        try {
            const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.deepseekApiKey}`
                },
                body: JSON.stringify({
                    model: "deepseek-chat",
                    messages: [
                        { role: "user", content: prompt }
                    ],
                    max_tokens: 2500,
                    temperature: 0.7,
                    stream: false
                })
            });

            console.log('API响应状态:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('API错误响应:', errorText);
                throw new Error(`API调用失败: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log('API响应数据结构:', Object.keys(data));

            if (!data.choices || !data.choices[0] || !data.choices[0].message) {
                throw new Error('API返回数据格式错误');
            }

            return data.choices[0].message.content;

        } catch (error) {
            console.error('Deepseek API调用失败:', error);
            if (error.message.includes('401')) {
                throw new Error('API密钥无效，请检查密钥是否正确');
            } else if (error.message.includes('429')) {
                throw new Error('请求过于频繁，请稍后重试');
            } else if (error.message.includes('500')) {
                throw new Error('AI服务暂时不可用，请稍后重试');
            } else {
                throw new Error(`网络错误: ${error.message}`);
            }
        }
    }

    // 显示AI喂养建议
    displayAIFeedingGuide(aiGuide, healthAnalysis, growthTrend, concerns) {
        console.log('显示AI喂养建议，内容长度:', aiGuide.length);

        const nutritionContent = document.getElementById('nutritionContent');
        const foodContent = document.getElementById('foodContent');
        const tipsContent = document.getElementById('tipsContent');

        console.log('内容容器检查:');
        console.log('- nutritionContent:', !!nutritionContent);
        console.log('- foodContent:', !!foodContent);
        console.log('- tipsContent:', !!tipsContent);

        // 解析AI回复，尝试分段显示
        const sections = this.parseAIGuide(aiGuide);

        if (nutritionContent) {
            let nutritionHTML = '';

            // 显示最新体检信息
            const latestRecord = this.getLatestRecord();
            nutritionHTML += `
                <div style="background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%); padding: 15px; border-radius: 15px; margin-bottom: 15px; border: 2px solid #2196F3;">
                    <strong>📊 最新体检数据（${latestRecord.checkDate}）：</strong><br>
                    年龄：${latestRecord.ageMonths}个月 | 身高：${latestRecord.height || '--'}cm (${latestRecord.heightPercentile || '--'}%) | 体重：${latestRecord.weight || '--'}kg (${latestRecord.weightPercentile || '--'}%) | 头围：${latestRecord.headCircumference || '--'}cm (${latestRecord.headPercentile || '--'}%)
                </div>
            `;

            // 显示生长趋势
            nutritionHTML += `
                <div style="background: linear-gradient(135deg, #F3E5F5 0%, #E1BEE7 100%); padding: 15px; border-radius: 15px; margin-bottom: 15px; border: 2px solid #9C27B0;">
                    <strong>📈 生长趋势：</strong>${growthTrend.trend}<br>
                    <small>${growthTrend.description}</small>
                </div>
            `;

            // 显示健康状况
            nutritionHTML += `
                <div style="background: linear-gradient(135deg, #FFF3CD 0%, #FFEAA7 100%); padding: 15px; border-radius: 15px; margin-bottom: 15px; border: 2px solid #FFC107;">
                    <strong>⚠️ 健康状况：</strong>${healthAnalysis.issues.join('、')}
                </div>
            `;

            // 如果有重点关注，显示
            if (concerns) {
                nutritionHTML += `
                    <div style="background: linear-gradient(135deg, #D1ECF1 0%, #B6E3EC 100%); padding: 15px; border-radius: 15px; margin-bottom: 15px; border: 2px solid #17A2B8;">
                        <strong>🎯 重点关注：</strong>${concerns}
                    </div>
                `;
            }

            nutritionHTML += sections.nutrition || `<div style="white-space: pre-wrap; background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1;">${aiGuide}</div>`;
            nutritionContent.innerHTML = nutritionHTML;
        }

        if (foodContent) {
            foodContent.innerHTML = sections.food || '<p style="text-align: center; color: #888;">请查看上方营养需求部分的完整建议</p>';
        }

        if (tipsContent) {
            tipsContent.innerHTML = sections.tips || '<p style="text-align: center; color: #888;">请查看上方营养需求部分的完整建议</p>';
        }
    }

    // 解析AI指导内容
    parseAIGuide(content) {
        const sections = {};

        // 尝试按标题分段
        const nutritionMatch = content.match(/(?:每日营养需求|### 1\. 每日营养需求|1\. 每日营养需求)[：:]?\s*([\s\S]*?)(?=(?:食物推荐|### 2\. 食物推荐|2\. 食物推荐|喂养技巧|### 3\. 喂养技巧|3\. 喂养技巧)|$)/);
        const foodMatch = content.match(/(?:食物推荐|### 2\. 食物推荐|2\. 食物推荐)[：:]?\s*([\s\S]*?)(?=(?:喂养技巧|### 3\. 喂养技巧|3\. 喂养技巧|每日营养|### 1\. 每日营养需求|1\. 每日营养需求)|$)/);
        const tipsMatch = content.match(/(?:喂养技巧|### 3\. 喂养技巧|3\. 喂养技巧)[：:]?\s*([\s\S]*?)(?=(?:每日营养|### 1\. 每日营养需求|1\. 每日营养需求|食物推荐|### 2\. 食物推荐|2\. 食物推荐)|$)/);

        if (nutritionMatch) {
            sections.nutrition = `<div style="white-space: pre-wrap; background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1;">${nutritionMatch[1].trim()}</div>`;
        }

        if (foodMatch) {
            sections.food = `<div style="white-space: pre-wrap; background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1;">${foodMatch[1].trim()}</div>`;
        }

        if (tipsMatch) {
            sections.tips = `<div style="white-space: pre-wrap; background: white; padding: 20px; border-radius: 15px; border: 2px solid #FFB6C1;">${tipsMatch[1].trim()}</div>`;
        }

        return sections;
    }

    // 显示加载状态
    showLoadingState(message) {
        const loadingEl = document.getElementById('loadingMessage');
        if (loadingEl) {
            const span = loadingEl.querySelector('span');
            if (span) span.textContent = message;
            loadingEl.classList.remove('hidden');
        }
    }

    // 隐藏加载状态
    hideLoadingState() {
        const loadingEl = document.getElementById('loadingMessage');
        if (loadingEl) {
            loadingEl.classList.add('hidden');
        }
    }

    // 显示消息提示
    showMessage(message, type = 'info') {
        const existingMessage = document.querySelector('.toast-message');
        if (existingMessage) {
            existingMessage.remove();
        }

        const messageEl = document.createElement('div');
        messageEl.className = 'toast-message';
        messageEl.textContent = message;

        messageEl.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 25px;
            color: white;
            z-index: 1000;
            font-size: 14px;
            font-weight: 600;
            max-width: 350px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            background: ${type === 'success' ? 'linear-gradient(135deg, #4CAF50 0%, #45A049 100%)' : 
                        type === 'error' ? 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)' : 
                        type === 'warning' ? 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)' : 
                        'linear-gradient(135deg, #2196F3 0%, #1976D2 100%)'};
            transition: all 0.3s ease;
            animation: slideInRight 0.5s ease-out;
        `;

        // 添加滑入动画
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100px); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);

        document.body.appendChild(messageEl);

        setTimeout(() => {
            if (messageEl.parentNode) {
                messageEl.style.opacity = '0';
                messageEl.style.transform = 'translateX(100px)';
                setTimeout(() => {
                    if (messageEl.parentNode) {
                        messageEl.remove();
                    }
                }, 300);
            }
        }, 3000);
    }

    // 修改：添加手动记录 - 增加基本信息验证
    addManualRecord() {
        // 验证基本信息
        if (!this.validateBasicInfo()) {
            return;
        }

        const formData = this.getFormData();
        if (this.validateFormData(formData)) {
            const gender = this.babyInfo.gender || 'male';
            const recordWithPercentiles = {
                ...formData,
                id: Date.now(),
                addedAt: new Date().toISOString(),
                heightPercentile: this.calculateWHOPercentileWithLinearInterpolation(formData.ageMonths, formData.height, 'height', gender),
                weightPercentile: this.calculateWHOPercentileWithLinearInterpolation(formData.ageMonths, formData.weight, 'weight', gender),
                headPercentile: this.calculateWHOPercentileWithLinearInterpolation(formData.ageMonths, formData.headCircumference, 'headCircumference', gender)
            };

            this.checkRecords.push(recordWithPercentiles);
            this.saveData();
            this.updateRecordsTable();
            this.updateCurrentStatus();
            this.updateChart();
            this.clearForm();
            this.showMessage('🎉 记录添加成功', 'success');
        }
    }

    // 获取表单数据
    getFormData() {
        return {
            checkDate: document.getElementById('checkDate')?.value || '',
            ageMonths: parseFloat(document.getElementById('ageMonths')?.value) || null,
            height: parseFloat(document.getElementById('height')?.value) || null,
            weight: parseFloat(document.getElementById('weight')?.value) || null,
            headCircumference: parseFloat(document.getElementById('headCircumference')?.value) || null
        };
    }

    // 验证表单数据
    validateFormData(data) {
        if (!data.checkDate) {
            this.showMessage('📅 请填写体检日期', 'error');
            return false;
        }
        if (!data.ageMonths || data.ageMonths <= 0) {
            this.showMessage('👶 请填写有效的年龄（月）', 'error');
            return false;
        }
        if (!data.height && !data.weight && !data.headCircumference) {
            this.showMessage('📏 请至少填写身高、体重或头围中的一项', 'error');
            return false;
        }
        return true;
    }

    // 保存数据到本地存储
    saveData() {
        localStorage.setItem('baby_check_records', JSON.stringify(this.checkRecords));
        localStorage.setItem('baby_info', JSON.stringify(this.babyInfo));
    }

    // 加载保存的数据
    loadSavedData() {
        // 设置API状态
        this.updateOCRStatus();
        this.updateDeepseekStatus();

        // 填充百度OCR密钥
        const baiduApiKeyInput = document.getElementById('baiduApiKey');
        const baiduSecretKeyInput = document.getElementById('baiduSecretKey');
        if (baiduApiKeyInput && this.baiduOCR.apiKey) {
            baiduApiKeyInput.value = this.baiduOCR.apiKey;
        }
        if (baiduSecretKeyInput && this.baiduOCR.secretKey) {
            baiduSecretKeyInput.value = this.baiduOCR.secretKey;
        }

        // 填充Deepseek API密钥
        const deepseekApiKeyInput = document.getElementById('deepseekApiKey');
        if (deepseekApiKeyInput && this.deepseekApiKey) {
            deepseekApiKeyInput.value = this.deepseekApiKey;
        }

        if (this.babyInfo.name) {
            const babyNameInput = document.getElementById('babyName');
            if (babyNameInput) babyNameInput.value = this.babyInfo.name;
        }
        if (this.babyInfo.gender) {
            const babyGenderSelect = document.getElementById('babyGender');
            if (babyGenderSelect) babyGenderSelect.value = this.babyInfo.gender;
        }
        if (this.babyInfo.birthDate) {
            const babyBirthDateInput = document.getElementById('babyBirthDate');
            if (babyBirthDateInput) babyBirthDateInput.value = this.babyInfo.birthDate;
        }
    }

    // 更新UI
    updateUI() {
        this.updateRecordsTable();
        this.updateStatistics();
        this.updateCurrentStatus();
    }

    // 更新当前状态
    updateCurrentStatus() {
        const latestRecord = this.getLatestRecord();

        if (latestRecord) {
            // 更新基本信息页面的当前状态
            const currentAgeEl = document.getElementById('currentAge');
            const currentHeightEl = document.getElementById('currentHeight');
            const currentWeightEl = document.getElementById('currentWeight');

            if (currentAgeEl) currentAgeEl.textContent = `${latestRecord.ageMonths}月`;
            if (currentHeightEl) currentHeightEl.textContent = `${latestRecord.height || '--'}cm`;
            if (currentWeightEl) currentWeightEl.textContent = `${latestRecord.weight || '--'}kg`;

            // 更新喂养指导页面的当前状态
            const feedingAgeEl = document.getElementById('feedingAge');
            const feedingHeightEl = document.getElementById('feedingHeight');
            const feedingWeightEl = document.getElementById('feedingWeight');

            if (feedingAgeEl) feedingAgeEl.textContent = `${latestRecord.ageMonths}月`;
            if (feedingHeightEl) feedingHeightEl.textContent = `${latestRecord.height || '--'}cm`;
            if (feedingWeightEl) feedingWeightEl.textContent = `${latestRecord.weight || '--'}kg`;
        } else {
            // 如果没有记录，显示默认值
            const elementsToUpdate = [
                'currentAge', 'currentHeight', 'currentWeight',
                'feedingAge', 'feedingHeight', 'feedingWeight'
            ];

            elementsToUpdate.forEach(id => {
                const el = document.getElementById(id);
                if (el) el.textContent = '--';
            });
        }
    }

    // 更新记录表格
    updateRecordsTable() {
        const tableBody = document.getElementById('recordsTableBody');
        const noRecords = document.getElementById('noRecords');

        if (!tableBody) return;

        tableBody.innerHTML = '';

        if (this.checkRecords.length === 0) {
            if (noRecords) noRecords.style.display = 'block';
            return;
        }

        if (noRecords) noRecords.style.display = 'none';

        const sortedRecords = [...this.checkRecords].sort((a, b) => new Date(b.checkDate) - new Date(a.checkDate));

        sortedRecords.forEach((record, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${record.checkDate}</td>
                <td>${record.ageMonths}个月</td>
                <td>${record.height || '--'}</td>
                <td>${record.heightPercentile || '--'}%</td>
                <td>${record.weight || '--'}</td>
                <td>${record.weightPercentile || '--'}%</td>
                <td>${record.headCircumference || '--'}</td>
                <td>${record.headPercentile || '--'}%</td>
                <td>
                    <button onclick="babyTracker.deleteRecord(${this.checkRecords.indexOf(record)})" class="btn btn-danger" 
                        style="padding: 8px 15px; font-size: 0.8em; border-radius: 15px; background: linear-gradient(135deg, #FF6B6B 0%, #FF5252 100%);">
                        🗑️ 删除
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    // 更新统计信息
    updateStatistics() {
        const statsEl = document.getElementById('statisticsInfo');
        if (statsEl && this.checkRecords.length > 0) {
            const latestRecord = this.getLatestRecord();
            statsEl.innerHTML = `
                <p><strong>📊 总记录数：</strong>${this.checkRecords.length}</p>
                <p><strong>🗓️ 最新记录：</strong>${latestRecord.checkDate}</p>
                <p><strong>👶 当前月龄：</strong>${latestRecord.ageMonths}个月</p>
                <p><strong>🤖 识别模式：</strong>百度OCR+AI增强</p>
            `;
        }
    }

    // 删除记录
    deleteRecord(index) {
        if (confirm('🤔 确定要删除这条记录吗？')) {
            this.checkRecords.splice(index, 1);
            this.saveData();
            this.updateRecordsTable();
            this.updateStatistics();
            this.updateCurrentStatus();
            this.updateChart();
            this.showMessage('✅ 记录已删除', 'success');
        }
    }

    // 清空表单
    clearForm() {
        const inputs = ['checkDate', 'ageMonths', 'height', 'weight', 'headCircumference'];
        inputs.forEach(id => {
            const el = document.getElementById(id);
            if (el) el.value = '';
        });

        const percentileEls = ['heightPercentile', 'weightPercentile', 'headPercentile'];
        percentileEls.forEach(id => {
            const el = document.getElementById(id);
            if (el) el.textContent = '--';
        });

        const uploadedImageDiv = document.getElementById('uploadedImage');
        if (uploadedImageDiv) uploadedImageDiv.classList.add('hidden');

        this.hideOCRResult();
        this.resetUploadInput();
    }

    // 导出数据
    exportData() {
        const data = {
            babyInfo: this.babyInfo,
            checkRecords: this.checkRecords,
            exportDate: new Date().toISOString(),
            version: '11.0-BaiduOCR'
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `baby_health_data_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        this.showMessage('💾 数据导出成功', 'success');
    }

    // 导入数据
    importData() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = JSON.parse(e.target.result);
                        if (data.checkRecords && Array.isArray(data.checkRecords)) {
                            this.babyInfo = data.babyInfo || {};
                            this.checkRecords = data.checkRecords || [];
                            this.saveData();
                            this.updateUI();
                            this.loadSavedData();
                            this.updateChart();
                            this.showMessage('📥 数据导入成功', 'success');
                        } else {
                            this.showMessage('❌ 数据格式不正确', 'error');
                        }
                    } catch (error) {
                        this.showMessage('⚠️ 数据格式错误，请检查文件', 'error');
                        console.error('导入错误:', error);
                    }
                };
                reader.readAsText(file);
            }
        };
        input.click();
    }
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
    window.babyTracker = new BabyHealthTracker();
    console.log('🎀 婴幼儿健康追踪系统已初始化 (百度OCR增强版 v11.0)');

    // 绑定图表类型切换事件
    const chartTypeInputs = document.querySelectorAll('input[name="chartType"]');
    chartTypeInputs.forEach(input => {
        input.addEventListener('change', () => {
            if (window.babyTracker && window.babyTracker.updateChart) {
                window.babyTracker.updateChart();
            }
        });
    });

    // 修复：绑定喂养指导按钮事件 - 使用事件委托
    document.addEventListener('click', (e) => {
        if (e.target && e.target.id === 'generateFeedingBtn') {
            console.log('喂养指导按钮被点击');
            if (window.babyTracker && window.babyTracker.generateAIFeedingGuide) {
                window.babyTracker.generateAIFeedingGuide();
            } else {
                console.error('generateAIFeedingGuide 方法不存在');
            }
        }
    });

    // 绑定标签页切换功能
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = button.getAttribute('data-tab');

            // 移除所有活动状态
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // 激活当前标签页
            button.classList.add('active');
            const targetContent = document.getElementById(targetTab);
            if (targetContent) {
                targetContent.classList.add('active');
            }
        });
    });

    // 初始化第一个标签页为活动状态
    if (tabButtons.length > 0) {
        tabButtons[0].classList.add('active');
        const firstTabId = tabButtons[0].getAttribute('data-tab');
        const firstTabContent = document.getElementById(firstTabId);
        if (firstTabContent) {
            firstTabContent.classList.add('active');
        }
    }
});
